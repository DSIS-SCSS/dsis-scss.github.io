<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智能缓存&amp;资源调度组</title>
  
  <subtitle>华中科技大学国家光电研究中心智能数据存储与管理实验室</subtitle>
  <link href="https://dsis-scss.github.io/atom.xml" rel="self"/>
  
  <link href="https://dsis-scss.github.io/"/>
  <updated>2022-09-03T11:43:51.105Z</updated>
  <id>https://dsis-scss.github.io/</id>
  
  <author>
    <name>DSIS_SCSS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>版本控制系统——git</title>
    <link href="https://dsis-scss.github.io/wiki/git/"/>
    <id>https://dsis-scss.github.io/wiki/git/</id>
    <published>2022-09-02T12:50:05.000Z</published>
    <updated>2022-09-03T11:43:51.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本页面将着重介绍 Git 这一版本控制系统，与 GitHub 相关的内容，请参考<a href="https://docs.github.com/cn">GitHub 帮助</a></p></blockquote><p>Git 是目前使用最广泛的版本控制系统之一。<strong>OI Wiki</strong>也使用了 Git 作为版本控制系统。</p><h2 id="安装">安装</h2><h3 id="windows">Windows</h3><h4 id="使用安装向导安装">使用安装向导安装</h4><blockquote><p>本节以 Git for Windows 2.28.0（2020-07-27更新）为例。安装页面的选项可能会随着时间而变动。</p></blockquote><p>Windows 系统可以在 <a href="https://git-scm.com/downloads">Git官网</a> 获取到 Git for Windows（下文简称 Git）的安装包。</p><p>下载完成后，运行 Git 的安装程序。弹出的页面如下图所示。</p><p><img src="git3.png" /></p><p>点击 <code>Next &gt;</code>，选择安装路径。</p><p><img src="git4.png" /></p><p>点击 <code>Next &gt;</code>，选择安装可选项。</p><p><img src="git5.png" /></p><p>默认的选项如上图所示，均不建议取消勾选。其他未勾选的选项可以依照需求勾选。</p><p>??? note "各选项功能详解" 默认勾选的选项：</p><pre><code>-   `Windows Explorer integration`：资源管理器集成（右键菜单）。    - `Git Bash Here`：在当前目录运行 Git 命令行。    - `Git GUI Here`：在当前目录运行 Git 图形化页面。- `Git LFS`：安装 Git Large File Support（大文件支持）。[^note1]- `Associate .git* configuration files with the default text editor`：将所有 `.git` 配置文件与默认文本编辑器关联，并用其打开。默认文本编辑器会在后面配置。- `Associate .sh files to be run with Bash`：将所有扩展名为 `.sh` 的文件与 Git Bash 关联，并用其执行。* * *默认不勾选的选项：-   `Additional icons`    - `On the Desktop`：让 Git 在桌面创建快捷方式。- `Use a TrueType font in all console windows`：让 Git 在所有命令行（包括 cmd 命令行窗口）中都使用 TrueType 字体。- `Check daily for Git for Windows updates`：让 Git 每天检查更新。</code></pre><p>点击 <code>Next &gt;</code>，选择存放 Git快捷方式的开始菜单文件夹。若勾选<code>Don't create a Start Menu folder</code>，则 Git不会在开始菜单创建快捷方式。</p><p><img src="git6.png" /></p><p>点击 <code>Next &gt;</code>，选择默认的编辑器。</p><p><img src="git7.png" /></p><p>在下拉菜单栏中，Git 提供了 nano、<ahref="./editor/vim.md">Vim</a>、<ahref="./editor/npp.md">Notepad++</a>、<ahref="./editor/vscode.md">Visual Studio Code</a>、Visual Studio CodeInsiders（VS Code 预览版）、Sublime Text、<ahref="./editor/atom.md">Atom</a> 和 VSCodium作为默认编辑器的预设方案。如果系统已经安装了上述的一种或多种编辑器，可以直接选择其中一种并进入下一步。另外，还可通过<code>Select other editor as Git's default editor</code>项手动指定默认编辑器。</p><p><img src="git8.png" /></p><p>除了 Vim外，如果选择了尚未安装的编辑器，安装程序会阻止使用者进入下一步。<ahref="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>用户可以通过给出的官网链接跳转到下载页面，完成编辑器的安装后继续安装Git。</p><p><img src="git9.png" /></p><p>选好默认编辑器后，点击 <code>Next &gt;</code> 进入下一步。</p><p>接下来的每一步都直接点击 <code>Next &gt;</code>。当<code>Next &gt;</code> 变为 <code>Install</code> 时，按下<code>Install</code> 进行安装。</p><p>最后，该页面出现，Git 安装完成。此时可以取消勾选<code>View Release Notes</code>，然后按下 <code>Next &gt;</code>直接退出；也可以直接按下 <code>Next &gt;</code>查看版本更新信息；亦可以勾选 <code>Launch Git Bash</code> 运行 Git命令行。</p><p><img src="git10.png" /></p><h4 id="使用包管理器安装">使用包管理器安装</h4><p>在 <a href="https://scoop.sh/"><code>scoop</code></a> 或 <ahref="https://github.com/microsoft/winget-cli"><code>winget</code></a>可用的情况下，Git for Windows 可以使用以下命令安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scoop install git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">winget install Git.Git</span><br></pre></td></tr></table></figure><p>这种安装方式的好处是安装过程由系统接管，相对安装向导而言更为方便。需要注意的是，这种方式默认编辑器为<code>vim</code>。</p><h3 id="linux">Linux</h3><p>Linux 系统可以通过包管理器进行安装。不同 Linux发行版的安装方式可能不同，<ahref="https://git-scm.com/download/linux">Git 官网</a>给出了不同系统下的安装方式。</p><h3 id="macos">macOS</h3><p>macOS 系统只需在终端执行 <code>brew install git</code>命令即可安装。（需安装 <a href="https://brew.sh/">Homebrew</a>）</p><h2 id="配置">配置</h2><p>Git根据配置文件的应用范围，将配置文件分为不同的等级，其中较常用的有两个级别<ahref="#fn2" class="footnote-ref" id="fnref2"role="doc-noteref"><sup>2</sup></a>：</p><ol type="1"><li>适用于当前用户的全局配置文件，该用户操作本系统上的所有仓库时都会查询该配置文件。</li><li>适用于当前仓库的配置文件。</li></ol><p>当多个配置文件对同一个选项作出设置的时候，局部设置会自动覆盖全局设置。因此如果需要在某个仓库应用特定的设置的话，只需更改该仓库下的特定设置即可，不会对全局设置造成影响。</p><p>修改配置文件需要用到 <code>git config</code> 命令。</p><h3 id="设置用户信息">设置用户信息</h3><p>安装 Git后，第一件事情就是设置你的用户名和邮箱。这些信息在每次提交时都会用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;OI Wiki&quot;</span></span><br><span class="line">$ git config --global user.email oi-wiki@example.com</span><br></pre></td></tr></table></figure><p>???+note这里给出的用户名和邮箱仅供演示。您在根据本页面的内容配置时，请记得将这里的用户名和邮箱改成自己的信息。</p><p>这里的 <code>--global</code>表示修改的是全局配置，即该设置对当前用户下的所有仓库均有效。如果不添加<code>--global</code> 选项，则会默认修改当前仓库下的配置文件。</p><p>如果想要修改某个仓库的特定设置，只需在该仓库下执行不带<code>--global</code> 的命令即可。</p><h3 id="配置编辑器">配置编辑器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor emacs</span><br></pre></td></tr></table></figure><p>执行如上命令可以将编辑器更改为 <ahref="./editor/emacs.md">Emacs</a>。</p><p>在 Windows 下，Git 的默认编辑器可以在安装 Git时选择（见前文）。之后若要修改，在 Git Bash里输入如上命令，将编辑器名换成编辑器的绝对路径，运行命令即可。</p><h3 id="显示配置">显示配置</h3><p>可以通过 <code>git config -l</code>列出当前已经设置的所有配置参数。使用 <code>git config --global -l</code>可以列出所有全局配置。</p><h2 id="仓库操作基础">仓库操作基础</h2><h3 id="新建-git-仓库">新建 Git 仓库</h3><p>新建一个 Git仓库非常简单，只需在想要建立仓库的文件夹输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>Git 将在当前文件夹新建一个 <code>.git</code>文件夹，一个仓库就这样建好了。</p><p>如果想把一个仓库克隆到自己的电脑上（比如将 <strong>OI Wiki</strong>的代码拷贝到本地上进行编辑），采用 <code>git clone</code> 命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/OI-wiki/OI-wiki</span><br></pre></td></tr></table></figure><p>???+note "远程仓库的链接" 这里给出的仓库链接是 HTTP(S)链接，也即我们采用了 HTTP(S) 方式连接到远程仓库。</p><pre><code>事实上，连接到远程仓库的方式还有多种。其中使用 ssh 连接到远程仓库的方法更为方便和安全，在「远程仓库的管理」部分我们会简单介绍使用 ssh 连接到远程仓库的方法。</code></pre><p>这样，被克隆的仓库的内容就会被储存到当前文件夹下一个与仓库同名的新文件夹。在本例中，当前文件夹下会出现一个名为<code>OI-wiki</code> 的新文件夹。</p><h3 id="跟踪文件">跟踪文件</h3><p>在对仓库的文件做出了一些更改后，这些更改需要被纳入到版本管理当中去。</p><p>使用 <code>git status</code> 命令可以查看当前仓库文件的状态。</p><p>举个例子，在一个空仓库中新增了一个 <code>README.md</code>文件后，执行 <code>git status</code> 命令的效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        README.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>这里的 Untracked files 指的是 Git之前没有纳入版本跟踪的文件。如果文件没有纳入版本跟踪，对该文件的更改不会被Git 记录。</p><p>执行 <code>git add &lt;文件&gt;</code>命令可以将指定的文件纳入到版本跟踪中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md <span class="comment"># 将这个文件纳入到版本跟踪中</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   README.md</span><br></pre></td></tr></table></figure><p>这时 <code>README.md</code>已经纳入了版本跟踪，放入了暂存区。接下来只需执行 <code>git commit</code>命令就可以提交这次更改了。</p><p>但在进行这一工作之前，让我们先对 <code>README.md</code>做点小更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim README.md <span class="comment"># 随便更改点东西</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   README.md</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.md</span><br></pre></td></tr></table></figure><p>你会发现 <code>README.md</code>同时处于暂存区和非暂存区。实际上，是否处于暂存区是对于更改而言的，而不是对于文件而言的，所以对<code>README.md</code>的前一次更改已被纳入暂存区，而后一次更改还没有。如果这时候执行<code>git commit</code>命令，只有处于暂存区的更改会被提交，而非暂存区的更改，则不会被提交。</p><p>Git 给了一条提示，执行 <code>git add README.md</code>就可以将非暂存区的更改放入暂存区了。</p><p>???+note "一次性将所有更改放入暂存区" <code>git add</code>命令会将对指定的文件的更改放入暂存区中。</p><pre><code>在多数情况下，用户更期望一次性将所有更改都放入暂存区中，这时候可以应用 `git add -A` 命令。该命令会将所有更改（包括未被纳入版本跟踪的文件，不包括被忽略的文件）放入暂存区。如果只需更新已被纳入版本跟踪的文件，而不将未纳入版本跟踪的文件加入暂存区，可以使用 `git add -u`。</code></pre><p>???+note "忽略文件"有些时候我们并不希望将一些文件（如可执行文件等）纳入到版本跟踪中。这时候可以在仓库根目录下创建<code>.gitignore</code> 文件，在该文件里写下想要忽略的文件。Git将不会将这些文件纳入到版本跟踪中。</p><pre><code>例如，`*.exe` 将自动忽略仓库里的所有扩展名为 `.exe` 的文件。</code></pre><p>现在将非暂存区的文件加入暂存区，将所有更改一并提交（commit）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md</span><br><span class="line">$ git commit <span class="comment"># 接下来会弹出编辑器页面，你需要写下 commit 信息</span></span><br><span class="line">[master (root-commit) f992763] initial commit</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure><p>现在重点观察一下这一次 commit 的信息。</p><p><code>master</code> 表示当前位于 <code>master</code>分支（关于分支的问题，下文将会详细介绍），<code>b13c84e</code>表示本次提交的 SHA-1 校验和的前几位，后面则是本次提交的信息。</p><p>需要特别关注的是这里的 SHA-1校验码，每个校验码都与某个时刻仓库的一个快照相对应。利用这一特性我们可以访问历史某个时刻的仓库快照，并在该快照上进行更改。</p><p>接下来两行则详细说明了本次更新涉及的文件更改。</p><p>另外，commit 过程中可以利用几个参数来简化提交过程：</p><ul><li><code>-a</code>：在提交前将所有已跟踪的文件的更改放入暂存区。需要注意的是未被跟踪的文件（新创建的文件）不会被自动加入暂存区，需要用<code>git add</code> 命令手动添加。</li><li><code>-m</code>：该参数后跟提交信息，表示以该提交信息提交本次更改。例如<code>git commit -m "fix: typo"</code> 会创建一条标题为<code>fix: typo</code> 的 commit。</li></ul><h3 id="查看提交记录">查看提交记录</h3><p>使用 <code>git log</code> 命令可以查看仓库的提交历史记录。</p><p>可以看到，提交历史里记录了每次提交时的 SHA-1校验和，提交的作者，提交时间和 commit 信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit ae9dd3768a405b348bc6170c7acb8b6cb5fe333e (HEAD -&gt; master)</span><br><span class="line">Author: OI Wiki &lt;oi-wiki@example.com&gt;</span><br><span class="line">Date:   Sun Sep 13 00:30:18 2020 +0800</span><br><span class="line"></span><br><span class="line">    feat: update README.md</span><br><span class="line"></span><br><span class="line">commit f99276362a3c260d439364c505a7a06859f34bf9</span><br><span class="line">Author: OI Wiki &lt;oi-wiki@example.com&gt;</span><br><span class="line">Date:   Sun Sep 13 00:06:07 2020 +0800</span><br><span class="line"></span><br><span class="line">    initial commit</span><br></pre></td></tr></table></figure><h2 id="分支管理">分支管理</h2><p>为什么版本管理中需要分支管理呢？答案主要有两点：</p><ol type="1"><li>直接更改主分支不仅会使历史记录混乱，也可能会造成一些危险的后果。</li><li>通过分支，我们可以专注于当前的工作。如果我们需要完成两个不同的工作，只需开两个分支即可，两个分支间的工作互不干扰。</li></ol><p>在 Git 中，简单来说，分支就是指向某个快照的指针。每次提交时，Git都会为这次提交创建一个快照，并将当前分支的指针移动到该快照。</p><p>另外还有一个 HEAD 指针，它指向当前所在的分支。</p><p>切换分支的过程，简单来说就是将 HEAD指针，从指向当前所在的分支，改为指向另外一个分支。在这一过程中，Git会自动完成文件的更新，使得切换分支后仓库的状态与目标分支指向的快照一致。</p><h3 id="分支的创建">分支的创建</h3><p>利用 <code>git branch</code>命令可以创建分支，<code>git switch</code>命令可以切换分支，<code>git switch -c</code>命令可以创建分支并切换到这个新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev <span class="comment"># 创建一个叫做 dev 的新分支并切换当前分支到 dev</span></span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">$ git branch <span class="comment"># 查看分支列表</span></span><br><span class="line">  master</span><br><span class="line">* dev</span><br></pre></td></tr></table></figure><p><code>dev</code> 前面的星号代表该仓库的当前分支为<code>dev</code>，接下来对这个仓库的更改都将记录在这个分支上。</p><p>试着创建一个新文件 <code>aplusb.cpp</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim aplusb.cpp</span><br><span class="line">$ git add aplusb.cpp</span><br><span class="line">$ git commit -m <span class="string">&quot;feat: add A+B Problem code&quot;</span></span><br><span class="line">[dev 5da093b] feat: add A+B Problem code</span><br><span class="line"> 1 file changed, 7 insertions(+)</span><br><span class="line"> create mode 100644 aplusb.cpp</span><br></pre></td></tr></table></figure><p>现在切换回 <code>master</code> 分支，这时候文件夹中没有了<code>aplusb.cpp</code>，一切都回到了刚刚创建 <code>dev</code>分支时的状态。这时候可以在 <code>master</code>分支上继续完成其他的工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">$ vim README.md <span class="comment"># 对 README 做些小改动</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;feat: update README.md&quot;</span></span><br><span class="line">[master 5ca15f0] feat: update README.md</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>下面用一张图来解释刚才的操作过程。</p><img src="/wiki/git/git1.png" class=""><p><code>master</code> 分支被标红，表明在这几次操作后，它是当前分支（即HEAD 指向的位置）。</p><ul><li>最开始时 <code>master</code> 指向 <code>ae9dd37</code>这一快照。</li><li>接下来在 <code>master</code> 所在的位置创建了一个新的 dev分支，该分支一开始和 master 指向相同位置。</li><li>在 <code>dev</code> 分支上作了一些更改（创建了<code>aplusb.cpp</code>），进行了一次提交，本次提交后，<code>dev</code>分支指向 <code>5da093b</code> 这一快照。</li><li>切换回 <code>master</code> 分支后，因为 <code>master</code>分支还指向 <code>ae9dd37</code>，还没有创建<code>aplusb.cpp</code>，因此仓库中没有这一文件。</li><li>接下来在 <code>master</code> 分支上进行更改（更新了<code>README.md</code>），进行了一次提交，<code>master</code> 分支指向了<code>5ca15f0</code> 这一快照。</li></ul><h3 id="分支的合并">分支的合并</h3><p>当一个分支上的工作已经完成，就可以将这些工作合并到另外一个分支上去。</p><p>还是接着上面这个例子，<code>dev</code> 分支的工作已经完成，通过<code>git merge</code>命令可以将该分支合并到当前分支（<code>master</code>）上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> aplusb.cpp | 7 +++++++</span><br><span class="line"> 1 file changed, 7 insertions(+)</span><br><span class="line"> create mode 100644 aplusb.cpp</span><br></pre></td></tr></table></figure><img src="/wiki/git/git2.png" class=""><p>这次合并具体是怎么执行的呢？</p><p>在合并之前，<code>master</code> 指向 <code>5ca15f0</code>，而<code>dev</code> 指向<code>5da093b</code>，这两个状态并不在一条链上。</p><p>Git 会找到这两个状态的最近公共祖先（在上图中是<code>ae9dd37</code>），并对这三个快照进行一次合并。三个快照合并的结果作为一个新的快照，并将当前分支指向这一快照。</p><p>合并过程本身也是一次提交，不过与常规提交不同的是，合并提交有不止一个前驱提交，它是多个提交状态合并后的结果。</p><p>在合并完成后，<code>dev</code>分支就完成了它的使命，这时候可以利用下面的命令删除 <code>dev</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev <span class="comment"># 对于未合并的分支，可以使用 -D 参数强制删除</span></span><br></pre></td></tr></table></figure><p>不过合并过程并非总是这么顺利，在某些情况下，合并过程可能会出现冲突，这个问题接下来会讲到。</p><h3 id="解决合并冲突">解决合并冲突</h3><p>如果在两个分支中，对同一个文件的同一部分进行了不同的更改，Git就无法自动合并这两个分支，也就是发生了合并冲突。</p><p>接着上面的例子，假如你在合并后的 <code>master</code>分支的基础上，新开了一个 <code>readme-refactor</code>分支，准备重写一份自述文件。但因为一些疏忽，你同时更改了<code>readme-refactor</code> 和 <code>master</code> 分支的自述文件。</p><p>刚开始自述文件是这样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># This is a test repo.</span></span><br><span class="line"></span><br><span class="line">This repo includes some c++ codes.</span><br></pre></td></tr></table></figure><p>在 <code>readme-refactor</code> 分支下的自述文件是这样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Code Library</span></span><br><span class="line"></span><br><span class="line">This repo includes some c++ codes.</span><br></pre></td></tr></table></figure><p>在 <code>master</code> 分支下的自述文件是这样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># This is a code library.</span></span><br><span class="line"></span><br><span class="line">This repo includes some c++ codes.</span><br></pre></td></tr></table></figure><p>这时候运行 <code>git merge readme-refactor</code> 命令，Git提示出现了合并冲突。</p><p>执行一下 <code>git status</code>命令，可以查看是哪些文件引发了冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">    both modified:      README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>如何解决冲突？对于每个发生了合并冲突的文件，Git都会在这些文件中加入标准的冲突解决标记。比如这个例子中的<code>README.md</code> 文件，打开后它长这个样子：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="section"># This is a code library.</span></span><br><span class="line">======</span><br><span class="line"><span class="section"># Code Library</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; readme-refactor</span><br><span class="line"></span><br><span class="line">This repo includes some c++ codes.</span><br></pre></td></tr></table></figure><p><code>======</code>作为分界线将两个分支的内容隔开，<code>&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>标记和 <code>======</code> 之间的部分是 HEAD 指针（<code>master</code>分支）的内容，而 <code>======</code> 和<code>&gt;&gt;&gt;&gt;&gt;&gt; readme-refactor</code> 标记之间的部分是<code>readme-refactor</code> 分支的内容。</p><p>通过编辑文本来处理冲突，删除这些冲突标记，保存文件，将这些文件纳入暂存区后提交，就可以解决合并冲突了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md <span class="comment"># 将发生冲突的文件纳入暂存区</span></span><br><span class="line">$ git commit</span><br><span class="line">[master fe92c6b] Merge branch readme-refactor into master</span><br></pre></td></tr></table></figure><h3 id="其他合并方式">其他合并方式</h3><p>默认情况下，Git 采用Merge（合并）的方式合并两个分支。使用该方法将分支 B 并入分支 A 时，会将B 分支的所有 commit 并入 A 分支的提交历史中。</p><p>除此以外，Git 还提供了两种合并分支的方式：Squash（压缩）和Rebase（变基）。</p><h4 id="squash压缩">Squash（压缩）</h4><p>使用 Squash 方式将分支 B 并入分支 A 时，在 B分支上的所有更改会被合并为一次 commit 提交到 A 分支。</p><p>在 <code>git merge</code> 中加入 <code>--squash</code> 参数即可使用Squash 方式进行分支合并。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; --squash</span><br></pre></td></tr></table></figure><p>需要注意的是，在执行上述命令后，Git 只会将 B 分支的所有更改存入 A分支的缓冲区内，接下来还需要执行一次 <code>git commit</code>命令完成合并工作。</p><p>使用 Squash 方式合并可以简化 commit 记录，但是会丢失具体到每一次commit 的信息（每次 commit 的提交者，每次 commit的更改等等），只留下合并为一个整体的信息（每次 commit 的提交者会以"Co-authored-by" 的形式在提交信息中列出）。但如果是在 GitHub 上进行Squash and Merge，原有的信息都可以在 Pull Request 中查看。</p><h4 id="rebase变基">Rebase（变基）</h4><p>使用 Rebase 方式将分支 B 并入分支 A 时，在 B 分支上的每一次 commit都会单独添加到 A 分支，而不再像 Merge 方式那样创建一个合并 commit来合并两个分支的内容<a href="#fn3" class="footnote-ref" id="fnref3"role="doc-noteref"><sup>3</sup></a>。</p><p>首先，切换到 B 分支，接下来将 B 分支变基到 A 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout B</span><br><span class="line">git rebase A</span><br></pre></td></tr></table></figure><p>现在切回到 A 分支，再执行一次 <code>git merge</code> 命令，即可完成将B 分支的内容合并到 A 分支的工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout A</span><br><span class="line">git merge B</span><br></pre></td></tr></table></figure><p>使用 Rebase 完成合并可以让提交历史线性化，在适当的场景下正确地使用Rebase 可以达到比 Merge 更好的效果。但是这样做会改变提交历史，在进行Rebase 时和 Rebase后再进行相关合并操作时都会增加出现冲突的可能，如果操作不当可能反而会使提交历史变得杂乱。因此，如果对Rebase 操作没有充分的了解，不建议使用。</p><h2 id="管理远程仓库">管理远程仓库</h2><p>在本地完成更改后，你可能会需要将这些更改推送到 GitHub 等 Git仓库托管平台上。托管在这些平台上的仓库就归属于远程仓库的范畴——你可以从这些仓库中获取信息，也可以将你作出的更改推送到远程仓库上。与其他人的协作往往离不开远程仓库，因此学会管理远程仓库很有必要。</p><h3 id="远程仓库的查看">远程仓库的查看</h3><p>使用 <code>git remote</code> 命令可以查看当前仓库的远程仓库列表。</p><p>如果当前仓库是克隆来的，那么应该会有一个叫做 origin的远程仓库，它的链接就是克隆时用的链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>如果要查看某个远程仓库的详细信息的话，可以这样操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github.com:OI-wiki/OI-wiki.git</span><br><span class="line">  Push  URL: git@github.com:OI-wiki/OI-wiki.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    git             tracked</span><br><span class="line">    master          tracked</span><br><span class="line">  ...</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="远程仓库的配置">远程仓库的配置</h3><p>执行 <code>git remote add &lt;name&gt; &lt;url&gt;</code>命令可以添加一个名字为 <code>name</code>，链接为 <code>url</code>的远程仓库。</p><p>执行 <code>git remote rename &lt;oldname&gt; &lt;newname&gt;</code>可以将名字为 <code>oldname</code> 的远程仓库改名为<code>newname</code>。</p><p>执行 <code>git remote rm &lt;name&gt;</code> 可以删除名字为<code>name</code> 的远程仓库。</p><p>执行 <code>git remote get-url &lt;name&gt;</code> 可以查看名字为<code>name</code> 的远程仓库的链接。</p><p>执行 <code>git remote set-url &lt;name&gt; &lt;newurl&gt;</code>可以将名字为 <code>name</code> 的远程仓库的链接更改为<code>newurl</code>。</p><h3 id="从远程仓库获取更改">从远程仓库获取更改</h3><p>在远程仓库中，其他人可能会推送一些更改，执行 <code>git fetch</code>命令可以将这些更改获取到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;remote-name&gt; <span class="comment"># 获取 &lt;remote-name&gt; 的更改</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>git fetch</code>命令只会获取远程仓库的更改，而不会将这些更改合并到本地仓库中。如果需要将这些更改进行合并，可以使用<code>git pull</code> 命令。在默认情况下，<code>git pull</code> 相当于<code>git fetch</code> 后 <code>git merge FETCH_HEAD</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;remote-name&gt; &lt;branch&gt; <span class="comment"># 获取 &lt;remote-name&gt; 的更改，然后将这些更改合并到 HEAD</span></span><br></pre></td></tr></table></figure><h3 id="将更改推送到远程仓库">将更改推送到远程仓库</h3><p>当你完成了一些更改之后，使用 <code>git push</code>命令可以将这些更改推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;remote&gt; &lt;from&gt;:&lt;to&gt; <span class="comment"># 将本地 &lt;from&gt; 分支的更改推送至 &lt;remote&gt; 的 &lt;to&gt; 分支</span></span><br></pre></td></tr></table></figure><p>根据远程仓库的要求，可能会要求你输入远程仓库账户的用户名和密码。</p><p>需要注意的是，你的更改能成功推送，需要满足两个条件：你拥有向这个仓库（分支）的写入权限，且你的这个分支比远程仓库的相应分支新（可以理解为没有人在你进行更改的这段时间进行了推送）。当远程分支有当前分支没有的新更改时，可以执行<code>git pull</code> 命令完成合并再提交。</p><p>如果你需要强制将本地分支的更改推送到远程仓库的话，可以加入<code>-f</code> 参数。此时<strong>远程仓库的提交历史会被本地的提交历史覆盖</strong>，因此该命令应谨慎使用。更好的选择是使用<code>--force-with-lease</code>参数，该参数仅在远程仓库没有更新时才会进行覆盖。需要注意的是，此处“更新”是相对于上一次fetch 而言的，如果使用了 VS Code 提供的 Auto Fetch功能，可能会没有注意到更新而使 <code>--force-with-lease</code> 和<code>-f</code> 一样危险。</p><h3 id="追踪远程分支">追踪远程分支</h3><p>通过将一个本地分支设定为追踪远程分支，可以方便地查看本地分支与远程分支的差别，并能简化与远程分支交互时的操作。</p><p>在开始追踪前，你需要先执行 <code>git fetch &lt;remote-name&gt;</code>将远程仓库的信息抓取到本地。</p><p>接下来执行<code>git switch &lt;remote-branch&gt;</code>，会在本地自动创建名字为<code>&lt;remote-branch&gt;</code>的新分支，并设定该分支自动追踪相应的远程分支。</p><p>???+note需要注意，只有当本地不存在该分支，且恰好只有一个远程分支的名字与该分支匹配时，Git才会自动创建该分支且设定其追踪相应的远程分支。</p><p>这时候执行 <code>git status</code>命令，会提示当前分支与远程分支之间的差别。</p><p>因为设定了本地分支追踪的远程分支，向远程分支推送的命令也被简化了。只需要执行<code>git push</code>命令，在本地分支上作出的更改就能被推送至其追踪的远程分支。</p><p>对于本地已有的分支，设定其对应的远程追踪分支也很容易。只需在当前分支下执行<code>git branch -u &lt;remote-name&gt;/&lt;remote-branch&gt;</code>，就可以设定当前的本地分支追踪<code>&lt;remote-name&gt;/&lt;remote-branch&gt;</code>这一远程分支。</p><h3 id="使用-ssh-连接">使用 ssh 连接</h3><p>与 HTTP(S) 相比，使用 ssh 连接到远程仓库更为方便安全。</p><p>在使用 ssh 连接到远程仓库之前，需要先在本地添加 ssh密钥。接下来需要将本地添加的 ssh 密钥的 <strong>公钥</strong>上传到远程仓库账户。</p><p>考虑到本文主要是给 <strong>OI Wiki</strong> 的贡献者提供一个使用 Git的教程，这里直接给出 <ahref="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh">GitHubDocs 提供的教程</a>，供各位读者参考。</p><p>完成以上步骤后，你就可以通过 ssh 连接到远程仓库了。下面就是一条通过ssh 连接 clone <strong>OI Wiki</strong> 仓库的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:OI-wiki/OI-wiki.git</span><br></pre></td></tr></table></figure><p>将更改推送至远程仓库的过程与使用 HTTP(S) 连接类似。但使用 ssh连接可以免去验证远程仓库帐号密码的过程。</p><h2 id="git-gui-tools">Git GUI Tools</h2><p>对于不熟悉命令行的同学，纯命令行的 Git 的上手难度可能会偏高，而借助GUI 工具可以一定程度上降低 Git 的上手难度。此外，相比于命令行，GUI工具在查看 diff 以及 log 时在体验上有一定程度的提高。</p><p>Git 本身自带有 GUI，市面上也有很多优秀的 Git GUI 工具，例如针对Windows 用户的 TortoiseGit<a href="#fn4" class="footnote-ref"id="fnref4" role="doc-noteref"><sup>4</sup></a>，支持 Windows 和 Mac 的Sourcetree<a href="#fn5" class="footnote-ref" id="fnref5"role="doc-noteref"><sup>5</sup></a>等。</p><p>这里简单介绍一下 TortoiseGit 的使用。下载并安装好 TortoiseGit之后，在本地仓库的目录下，单击鼠标右键，在右键菜单中就可以看到 Git的各个功能。</p><p><img src="git11.png" /></p><p>详细的使用方法这里不再赘述，可以参考官网里的使用文档或者通过搜索引擎学习，例如<ahref="https://tortoisegit.org/docs/tortoisegit/index.html">TortoiseGitManual</a>。</p><p>很多 GUI 工具都有官方中文支持，例如 Git Desktop 以及TortoiseGit。但是还是会有部分翻译看起来较为变扭，推荐使用英文版本。</p><h2 id="外部链接">外部链接</h2><ul><li><a href="https://git-scm.com/docs">Git Reference</a></li><li><a href="https://git-scm.com/book/zh/v2">Pro Git Book</a></li><li><a href="https://learngitbranching.js.org/">Learn GitBranching</a></li></ul><h2 id="参考资料与注释">参考资料与注释</h2><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>但是，Git for Windows 对 Vim的描述是“虽然强大，但是可能会难以使用。用户界面反人类，键位映射卡手。Git使用 Vim 作为默认编辑器只是出于历史原因，强烈推荐换用一个 UI设计现代化的编辑器。”，并给“难以使用”加上了 <ahref="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/">StackOverflow 每年帮助一百万名开发者退出 Vim</a> 的页面链接。<ahref="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p>事实上 Git还有一个针对系统上每一个用户及系统上所有仓库的通用配置文件，该配置文件覆盖范围最广，等级在用户配置文件之上。因为该配置实践中较少使用，这里不再展开。<ahref="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p><ahref="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">ProGit Book</a> 中提供了可视化的 Rebase 过程图，借助图片读者可以更好地理解Rebase 的机制。<a href="#fnref3" class="footnote-back"role="doc-backlink">↩︎</a></p></li><li id="fn4" role="doc-endnote"><p><ahref="https://tortoisegit.org/">TortoiseGit</a><a href="#fnref4"class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5" role="doc-endnote"><p><ahref="https://www.sourcetreeapp.com/">Sourcetree</a><a href="#fnref5"class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本页面将着重介绍 Git 这一版本控制系统，与 GitHub 相关的内容，请参考
&lt;a href=&quot;https://docs.github.com/cn&quot;&gt;GitHub 帮助&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git 是目前使用最广</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>WSL(在Windows上运行Linux)</title>
    <link href="https://dsis-scss.github.io/wiki/WSL/"/>
    <id>https://dsis-scss.github.io/wiki/WSL/</id>
    <published>2022-09-02T12:11:22.000Z</published>
    <updated>2022-09-03T11:43:51.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入">引入</h2><p>Windows 10 在一周年更新时推出了 Linux 子系统（WSL），在 2020 年 5月更新中升级到了 WSL 2。截至 2020 年 6 月 1 日，WSL 已支持安装Ubuntu、openSUSE Leap、Kali、Debian 等主流 Linux 分发版。但 WSL 并不支持NOI 评测用的 Arbiter。</p><blockquote><p><ahref="https://zh.wikipedia.org/zh-cn/%E9%80%82%E7%94%A8%E4%BA%8E_Linux_%E7%9A%84_Windows_%E5%AD%90%E7%B3%BB%E7%BB%9F">什么是Linux 子系统（WSL）</a> " 适用于 Linux 的 Windows 子系统（英语：WindowsSubsystem for Linux，简称 WSL）是一个为在 Windows 10、Windows 11 与Windows Server 2019 上能够原生运行 Linux 二进制可执行文件（ELF格式）的兼容层。 WSL 可让开发人员按原样运行 GNU/Linux 环境 -包括大多数命令行工具、实用工具和应用程序 - 且不会产生虚拟机开销。</p></blockquote><pre><code>WSL 仅在版本 1607 之后的 64 位版本的 Windows 10 中可用。它也可在 Windows Server 2019 中使用。</code></pre><hr /><h2 id="启用-wslref3">启用 WSL<a href="#fn1" class="footnote-ref"id="fnref1" role="doc-noteref"><sup>1</sup></a></h2><h3 id="自动安装">自动安装</h3><blockquote><p>本部分适用于 Windows 10 版本 2004 及更高版本（内部版本 19041及更高版本）或 Windows 11。如果你正在使用 2004以下版本或你的电脑不支持虚拟化，请阅读下面的手动安装一节。如果你正在使用Windows 10 1607 以下版本的 Windows，你的系统不支持 WSL。</p></blockquote><ol type="1"><li><p>以管理员身份打开 Windows Powershell（右击 "开始" 按钮，选择Windows PowerShell（管理员）或 Windows 终端（管理员）)</p></li><li><p>输入<code>wsl --install</code>，并等待所有组件自动安装完成。期间你可能需要重启你的计算机来启用必要的Windows 功能。</p></li><li><p>安装完成后，你可以在 "开始" 菜单或 Windows终端的标签页中找到你安装的发行版。</p></li><li><p>接下来，请转到下面“配置分发版”一节完成其他设置。</p></li></ol><h3 id="手动安装ref4">手动安装<a href="#fn2" class="footnote-ref"id="fnref2" role="doc-noteref"><sup>2</sup></a></h3><blockquote><p>下面介绍手动安装 WSL的步骤。如果你已经完成了自动安装，请跳过此部分。</p></blockquote><h4 id="启用适用于-linux-的-windows-子系统">启用适用于 Linux 的 Windows子系统</h4><p>在安装适用于 WSL 的任何 Linux分发版之前，必须在下述两种方法中选择一种，以确保启用“适用于 Linux 的Windows 子系统”可选功能：</p><p><strong>使用命令行：</strong></p><ol type="1"><li><p>以管理员身份打开 PowerShell 并运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Windows-Subsystem-Linux</span></span><br><span class="line"><span class="comment"># 如果你只想要使用 WSL 1 请跳过此步骤</span></span><br><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> VirtualMachinePlatform</span><br></pre></td></tr></table></figure></li><li><p>出现提示时，重启计算机。</p></li></ol><p><strong>使用图形界面：</strong></p><p><img src="wsl-windows-features.png" /></p><ol type="1"><li><p>打开“控制面板”</p></li><li><p>访问“程序和功能”子菜单“打开或关闭 Windows 功能”</p></li><li><p>选择 "适用于 Linux 的 Windows 子系统" 与 "虚拟机平台"</p></li><li><p>点击确定</p></li><li><p>重启</p></li></ol><h4 id="安装内核更新包">安装内核更新包</h4><p>如果你想要使用 WSL 1, 请跳过此步骤。</p><p>下载 <ahref="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于x64 计算机的 WSL2 Linux 内核更新包</a> 并安装。</p><h4 id="设置-wsl-默认版本">设置 WSL 默认版本</h4><p>绝大部分情况下，建议使用 WSL 2。 WSL 1 与 WSL 2 的区别，请见 <ahref="https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions">比较WSL 2 和 WSL 1</a></p><blockquote><p>"关于 systemd" WSL 1 完全不支持 systemd（这意味着一些需要 systemd的功能无法实现或需要别的 hack），WSL 2 可以使用 <ahref="https://github.com/arkane-systems/genie">genie</a>。 此外，<ahref="https://github.com/yuk7/arch-systemctl-alt">yuk7/arch-systemctl-alt</a>项目提供了一个在 WSL 1 与 2 都可用的 alternativescript，但是它只具有部分兼容且只在 ArchWSL 进行了测试。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 WSL 默认版本设置为 WSL 2</span></span><br><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="安装-wsl-分发版">安装 WSL 分发版</h4><p><img src="wsl-search-page.png" /></p><p>进入 MicrosoftStore，搜索“Ubuntu”，然后选择“Ubuntu”，点击“安装”进行安装。也可打开 <ahref="https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6">Ubuntu的商店页面</a>。</p><blockquote><p>Microsoft Store 的 Ubuntu 随着 Ubuntu的更新而更新，因此内容可能会有所改变。如果想获取稳定的 Ubuntu长期支持版，可以在 Microsoft Store 安装 Ubuntu 的 LTS 版本。</p></blockquote><h2 id="配置分发版ref5">配置分发版<a href="#fn3" class="footnote-ref"id="fnref3" role="doc-noteref"><sup>3</sup></a></h2><p>本章以 Windows 自动安装的 Ubuntu 为例。</p><h3 id="运行-ubuntu">运行 Ubuntu</h3><p>打开“开始”菜单找到 Ubuntu 并启动，或使用 <code>wsl</code> 命令从Windows 命令行启动。</p><p>可以为 Ubuntu创建应用程序磁贴或固定至任务栏，以在下次方便地打开。</p><h3 id="初始化">初始化</h3><p>第一次运行 Ubuntu，需要完成初始化。</p><pre><code>Installing, this may take a few minutes...</code></pre><p>等待一两分钟时间，系统会提示创建新的用户帐户。</p><pre><code>Please create a default UNIX user account. The username does not need to match your Windows username.For more information visit: https://aka.ms/wslusersEnter new UNIX username: chtholly</code></pre><p>输入完用户名以后会提示输入密码。在 Linux中，输入密码时屏幕上不显示文字属于正常现象。</p><pre><code>Enter new UNIX password:</code></pre><p>设置好帐户名和密码后，WSL 就安装完成了。</p><pre><code>Installation successful!To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.See &quot;man sudo_root&quot; for details.chtholly@SENIORIOUS:~$</code></pre><h2 id="基础配置">基础配置</h2><p>初次安装好的系统不附带任何 C/C++ 编译器，需要手动配置环境。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc</span></span><br><span class="line">The program &#x27;gcc&#x27; is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt install gcc</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++</span></span><br><span class="line">The program &#x27;g++&#x27; is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt install g++</span><br></pre></td></tr></table></figure><h3 id="更换为国内软件源">更换为国内软件源</h3><p>Ubuntu 默认的软件源在国外。可以换成国内的软件源以加快速度，如 <ahref="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华 TUNA的软件源</a>。</p><blockquote><p>"使用与自己系统版本匹配的软件源"。请在页面中寻找与自己系统版本相配的源（可使用<code>sudo lsb_release -a</code> 查看 Ubuntu 版本）。</p></blockquote><pre><code>除非你知道你在做什么，否则不要使用与自己的系统版本不匹配的源！</code></pre><p>使用以下命令更新软件和软件源：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/apt/sources.list</span></span><br><span class="line">...（按 i 之后将上文的源右键粘贴进去，编辑完后按 Esc，再输入 :wq 和回车）</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt upgrade -y</span></span><br></pre></td></tr></table></figure><h3 id="安装中文环境">安装中文环境</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install language-pack-zh-han* -y</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">locale-gen zh_CN.GB18030 &amp;&amp; locale-gen zh_CN.UTF-8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install fontconfig -y</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install fonts-noto-cjk -y <span class="comment"># 中文字体</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install fonts-wqy-microhei -y</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install fonts-wqy-zenhei -y</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dpkg-reconfigure locales</span></span><br></pre></td></tr></table></figure><p>使用 <code>sudo dpkg-reconfigure locales</code>进入菜单，按空格选择带 <code>zh_CN</code> 的选项（推荐<code>zh_CN.UTF-8 UTF-8</code>），选完后回车。</p><pre><code>Locales to be generated:    ...    [ ] zh_CN.GBK GBK    [*] zh_CN.UTF-8 UTF-8    [ ] zh_HK BIG5-HKSCS    ...        &lt;Ok&gt;            &lt;Cancel&gt;</code></pre><p>下一个菜单中选择 <code>zh_CN.UTF-8</code> 回车。</p><pre><code>Default locale for the system environment:             None             C.UTF-8             en_US.UTF-8            [zh_CN.UTF-8]        &lt;Ok&gt;            &lt;Cancel&gt;</code></pre><p>之后关闭 WSL 并重启，系统就会变成中文。</p><p>再依次输入下列命令，把 <code>man</code> 帮助页替换为中文。<ahref="#fn4" class="footnote-ref" id="fnref4"role="doc-noteref"><sup>4</sup></a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install manpages-zh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sed -i <span class="string">&#x27;s|/usr/share/man|/usr/share/man/zh_CN|g&#x27;</span> /etc/manpath.config</span></span><br></pre></td></tr></table></figure><p>可以用 <code>man help</code> 测试。</p><h3 id="安装编译环境ref7">安装编译环境<a href="#fn5"class="footnote-ref" id="fnref5"role="doc-noteref"><sup>5</sup></a></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install -y build-essential vim ddd gdb fpc emacs gedit anjuta lazarus</span></span><br></pre></td></tr></table></figure><p>GUIDE 的安装请参考 <a href="./editor/guide.md#debian-ubuntu">Debian或 Ubuntu 下 GUIDE 的安装</a>。</p><p>这里安装的是基础 + NOI 官方要求的环境，如有需要可以用<code>apt install &lt;程序名&gt;</code> 来安装其它软件包。若想安装其他版本可以参考 Debian 官方的 <ahref="https://www.debian.org/doc/manuals/debian-reference/ch02.zh-cn.html">包管理手册</a>。</p><p>以下为一个示例程序：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim cpuid.cpp</span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -Wall cpuid.cpp -o cpuid</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./cpuid</span></span><br><span class="line">AMD Ryzen 5 1400 Quad-Core Processor</span><br></pre></td></tr></table></figure><blockquote><p>Linux 环境下可执行文件可不带扩展名，实现方式看上方命令。</p></blockquote><h2 id="进阶操作">进阶操作</h2><h3 id="使用-wslg-运行-gui-程序">使用 WSLg 运行 GUI 程序</h3><p>如果你使用 Windows 11 Build 22000 以上版本，则可以使用 WSL 2提供的集成的桌面体验。该功能允许你直接安装并启动 Linux桌面程序而无须其他配置。</p><p>参见 <ahref="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">在适用于Linux 的 Windows 子系统上运行 Linux GUI 应用（预览）</a></p><h3id="安装图形环境并使用远程桌面连接">安装图形环境，并使用远程桌面连接</h3><p>如果你使用的版本尚不支持 WSLg,可以尝试使用以下指南开启图形界面功能。</p><p>以下以 Xfce 为例。</p><p>如果只想安装 Xfce，可以执行以下命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install xfce4 tightvncserver -y</span></span><br></pre></td></tr></table></figure><p>如果除 Xfce 外想要更多的软件，可以执行以下命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo apt install xubuntu-desktop -y</span></span><br></pre></td></tr></table></figure><p>图形环境文件较大，下载解包需要一定时间。</p><p>配置 xrdp：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install xrdp -y</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;xfce4-session&quot;</span> &gt;~/.xsession</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">service xrdp restart</span></span><br></pre></td></tr></table></figure><p>为了防止和计算机本来带的远程桌面冲突，最好换一下端口。</p><p><img src="wsl-result-of-not-changing-ports.png" /></p><p>运行命令<code>sudo sed 's/port=[0-9]&#123;1,5&#125;/port=otherport/' /etc/xrdp/xrdp.ini</code>，其中<code>otherport</code> 为其他端口（如 <code>3390</code>）。</p><pre><code>[globals]...port=3390</code></pre><p>运行 <code>sudo service xrdp restart</code>，然后去开始菜单，用<code>localhost:otherport</code> 来访问。</p><p><img src="wsl-login-using-non-root.png" /></p><p><img src="wsl-first-login.png" /></p><h3 id="使用-xming-连接">使用 Xming 连接</h3><p>进入 Ubuntu 环境，安装 xterm：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install xterm -y</span></span><br></pre></td></tr></table></figure><p>退出 Ubuntu。</p><p>从 <a href="https://sourceforge.net/projects/xming/">Xming X Server下载地址</a> 下载最新的 Xming Server，然后安装：</p><p><img src="wsl-xming-setup-wizard.png" /></p><p>如果安装完后忘记勾选 Launch Xming，需在开始菜单里打开 Xming：</p><p><img src="wsl-xming.png" /></p><p>之后再回到 Ubuntu，键入如下指令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">DISPLAY=:0 xterm</span></span><br></pre></td></tr></table></figure><p><img src="wsl-open-xterm.png" /></p><p>如果使用了 xfce4，可以在弹出的窗口中使用如下命令激活 xfce4：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xfce4-session</span></span><br></pre></td></tr></table></figure><p><img src="wsl-open-xfce4-session.png" /></p><p>运行结果如图。（在 Xming中使用<kbd>Ctrl</kbd>+<kbd>C</kbd>就可以退出该界面。）</p><p><img src="wsl-xfce.png" /></p><h3 id="wsl-与-windows-文件的互访问">WSL 与 Windows 文件的互访问</h3><p>Windows 下的硬盘被自动挂载至 Linux 环境下的 <code>/mnt</code>文件夹下。 如 C 盘在 WSL 下的路径为 <code>/mnt/c</code></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\chtholly&gt; bash</span><br><span class="line"><span class="meta prompt_">/mnt/c/Users/chtholly$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Hello world!&quot;</span> &gt; hello</span></span><br><span class="line"><span class="meta prompt_">/mnt/c/Users/chtholly$ </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">PS C:\Users\chtholly&gt; cat hello</span><br><span class="line">Hello world!</span><br><span class="line">PS C:\Users\chtholly&gt; echo &quot;Welcome!&quot; &gt; welcome</span><br><span class="line">PS C:\Users\chtholly&gt; bash</span><br><span class="line"><span class="meta prompt_">/mnt/c/Users/chtholly$ </span><span class="language-bash"><span class="built_in">cat</span> welcome</span></span><br><span class="line">Welcome!</span><br></pre></td></tr></table></figure><p>相对的，也可以从文件管理器访问 WSL 目录。在安装 WSL后，可以在资源管理器的侧边栏中发现 Linux项，在其中可以访问所有安装的发行版其中的文件。</p><p>同样，也可以在资源管理器的路径或运行（Win+R）中直接输入<code>\\wsl$</code> 来转到 WSL 的目录。</p><p>也可以直接使用诸如 <code>\\wsl$\Ubuntu\home\</code>的路径访问其子文件夹。</p><h3 id="配合-visual-sudio-code-进行编辑">配合 Visual Sudio Code进行编辑</h3><p>如果习惯在 Windows 环境下使用 <a href="./editor/vscode.md">VisualStudio Code</a> 进行代码编辑，可以安装 VSC 中的<code>Remote - WSL</code> 插件，更方便地对 WSL系统中的文件进行编辑。</p><p>通过 <code>Remote - WSL</code>，可以在 Windows 下的 VS Code界面中直接对 WSL子系统进行操作，更加方便地编辑子系统目录下的文件、更方便地使用终端进行调试。</p><p>通过在 WSL 中直接键入 <code>code .</code>，可以在该目录下直接唤出Visual Studio Code，对于该目录下的文件进行编辑。</p><p>同时，可以通过类似 <code>code filename</code>的命令，对于指定文件进行编辑。</p><p>在插件 <code>Remote - WSL</code> 的 Getting Started页面，包含对于编辑操作的详细简介。</p><p>同时，也可以参考 Visual Studio Code 的官方文档中关于 WSL 的内容（<ahref="https://code.visualstudio.com/docs/remote/wsl-tutorial">Remotedevelopment in WSL</a>），这篇文章包含从 WSL安装到配合插件使用的全流程的更详细的介绍。</p><h2 id="faq">FAQ</h2><p>参见：<ahref="https://docs.microsoft.com/zh-cn/windows/wsl/faq">常见问题</a>，<ahref="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-faq">WSL 2常见问题解答</a></p><ul><li><p>如何在子系统下进行 xxx？</p><p>可以用自带命令行，或者使用图形界面。 比如说 vim，在命令行中键入<code>man vim</code>，会给出一份详尽的使用方法。 亦可使用<code>vim --help</code>。</p><p>关于命令行，可阅读 <a href="./cmd.md">命令行</a></p></li><li><p>对系统资源的占用量？</p><p>这个系统和 Windows 10 共用Host，所以理论上是比虚拟机占用小的。</p></li></ul><h2 id="外部链接">外部链接</h2><ul><li><ahref="https://docs.microsoft.com/zh-cn/windows/wsl/about">关于适用于Linux 的 Windows 子系统</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu镜像使用帮助，清华 TUNA</a></li><li><a href="https://dowww.spencerwoo.com">Dev on Windows with WSL（在Windows 上用 WSL 优雅开发）</a></li><li><a href="https://github.com/sirredbeard/Awesome-WSL">GitHub 上的Awesome-WSL</a></li><li><ahref="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting">排查适用于Linux 的 Windows 子系统问题</a></li></ul><h2 id="参考资料与注释">参考资料与注释</h2><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><ahref="https://docs.microsoft.com/zh-cn/windows/wsl/install">安装 WSL,Microsoft Docs</a><a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p><ahref="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">旧版WSL 的手动安装步骤</a><a href="#fnref2" class="footnote-back"role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p><ahref="https://wiki.ubuntu.com/WSL">WSL-Ubuntu 维基，ubuntu wiki</a><ahref="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4" role="doc-endnote"><p><ahref="https://blog.csdn.net/qq_14989227/article/details/72954523">Ubuntu的 man 命令帮助如何设置中文版，Frank 看庐山，2017-06-09</a><ahref="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5" role="doc-endnote"><p><ahref="https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/#cie8WdR3uSjgR5Ru.97">RunBash on Ubuntu on Windows, Mike Harsh, 2016-05-30, Windows Blog</a><ahref="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;引入&lt;/h2&gt;
&lt;p&gt;Windows 10 在一周年更新时推出了 Linux 子系统（WSL），在 2020 年 5
月更新中升级到了 WSL 2。截至 2020 年 6 月 1 日，WSL 已支持安装
Ubuntu、openSUSE Leap、Kali、</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Latex</title>
    <link href="https://dsis-scss.github.io/wiki/Latex/"/>
    <id>https://dsis-scss.github.io/wiki/Latex/</id>
    <published>2022-09-02T09:26:39.000Z</published>
    <updated>2022-09-03T11:43:51.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><h3 id="什么是-latex">什么是 LaTeX</h3><p>LaTeX（读作/ˈlɑːtɛx/或/ˈleɪtɛx/）是一个让你的文档看起来更专业的排版系统，而不是文字处理器。它尤其适合处理篇幅较长、结构严谨的文档，并且十分擅长处理公式表达。它是免费的软件，对大多数操作系统都适用。</p><p>LaTeX 基于 TeX（Donald Knuth 在 1978年为数字化排版设计的排版系统）。TeX是一种电脑能够处理的低级语言，但大多数人发现它很难使用。LaTeX正是为了让它变得更加易用而设计的。目前 LaTeX 的版本是 LaTeX 2e。</p><p>如果你习惯于使用微软的 Office Word 处理文档，那么你会觉得 LaTeX的工作方式让你很不习惯。Word是典型的“所见即所得”的编辑器，你可以在编排文档的时侯查看到最终的排版效果。但使用LaTeX时你并不能方便地查看最终效果，这使得你专注于内容而不是外观的调整。</p><p>一个 LaTeX 文档是一个以 <code>.tex</code>结尾的文本文件，可以使用任意的文本编辑器编辑，比如Notepad，但对于大多数人而言，使用一个合适的 LaTeX编辑器会使得编辑的过程容易很多。在编辑的过程中你可以标记文档的结构。完成后你可以进行编译——这意味着将它转化为另一种格式的文档。它支持多种格式，但最常用的是PDF 文档格式。</p><h3 id="在开始之前">在开始之前</h3><p>下面列出在本文中使用到的记号：</p><ul><li>希望你实施的操作会被打上一个箭头 <spanclass="math inline">\(\rightarrow\)</span>；</li><li>你输入的字符会被装进代码块中；</li><li>菜单命令与按钮的名称会被标记为 <strong>粗体</strong>。</li></ul><h3 id="一些概念">一些概念</h3><p>如果需要编写 LaTeX 文档，你需要安装一个「发行版」，常用的发行版有 <ahref="http://tug.org/texlive/">TeX Live</a>、<ahref="https://miktex.org/">MikTeX</a> 和适用于 macOS 用户的MacTeX（实际上是 TeX Live 的 macOS 版本），至于 <ahref="http://www.ctex.org/">CTeX</a> 则现在不推荐使用。TeX Live 和MacTeX 带有几乎所有的 LaTeX 宏包；而 MikTeX只带有少量必须的宏包，其他宏包将在需要时安装。</p><p>TeX Live 和 MikTeX 都带有 TeXworks 编辑器，你也可以安装功能更多的TeXstudio 编辑器，或者自行配置 Visual Studio Code 或 Notepad++等编辑器。下文所使用的编辑器是运行在 Windows 7 上的 TeXworks。</p><p>大部分发行版都带有多个引擎，如 pdfTeX 和XeTeX。对于中文用户，推荐使用 XeTeX 以获得 Unicode 支持。</p><p>TeX 有多种格式，如 Plain TeX 和 LaTeX。现在一般使用 LaTeX格式。所以，你需要使用与你所使用的格式打包在一起的引擎。如对于pdfTeX，你需要使用 pdfLaTeX，对于 XeTeX 则是 XeLaTeX。</p><p>扩展阅读：<ahref="https://liam.page/2018/11/26/introduction-to-TeX-engine-format-and-distribution/">TeX引擎、格式、发行版之介绍</a>。</p><h3 id="环境配置">环境配置</h3><p>对于 Windows 用户，你需要下载 TeX Live 或 MikTeX。国内用户可以使用 <ahref="https://mirrors.tuna.tsinghua.edu.cn/">清华大学 TUNA镜像站</a>，请点击页面右侧的「获取下载链接」按钮，并选择「应用软件」标签下的「TeX排版系统」即可下载 TeX Live 或 MikTeX 的安装包，其中 TeX Live的安装包是一个 ISO 文件，需要挂载后以管理员权限执行<code>install-tl-advanced.bat</code>。</p><p>对于 macOS 用户，清华大学 TUNA 镜像站同样提供 MacTeX 和 macOS 版MikTeX 的下载。</p><p>对于 Linux 用户，如果使用 TeX Live，则同样下载 ISO 文件，执行<code>install-tl</code> 脚本；如果使用 MikTeX，则按照 <ahref="https://miktex.org/download#unx">官方文档</a> 进行安装。</p><h2 id="文档结构">文档结构</h2><h3 id="基本要素">基本要素</h3><p><span class="math inline">\(\rightarrow\)</span> 打开 TeXworks。</p><p>一个新的文档会被自动打开。</p><p><span class="math inline">\(\rightarrow\)</span> 进入<strong>Format</strong> 菜单，选择 <strong>Line Numbers</strong>。</p><p>行号并不是要素，但它可以帮助你比较代码与屏幕信息，找到错误。</p><p><span class="math inline">\(\rightarrow\)</span> 进入<strong>Format</strong> 菜单，选择 <strong>SyntaxColoring</strong>，然后选择 <strong>LaTeX</strong>。</p><p>语法色彩会高亮代码，使得代码更加易读。</p><p><span class="math inline">\(\rightarrow\)</span> 输入以下文字：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,12pt]&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">A sentence of text.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><code>\documentclass</code> 命令必须出现在每个 LaTeX文档的开头。花括号内的文本指定了文档的类型。<strong>article</strong>文档类型适合较短的文章，比如期刊文章和短篇报告。其他文档类型包括<strong>report</strong>（适用于更长的多章节的文档，比如博士生论文），<strong>proc</strong>（会议论文集），<strong>book</strong>和<strong>beamer</strong>。方括号内的文本指定了一些选项——示例中它设置纸张大小为A4，主要文字大小为 12pt。</p><p><code>\begin&#123;document&#125;</code> 和 <code>\end&#123;document&#125;</code>命令将你的文本内容包裹起来。任何在 <code>\begin&#123;documnet&#125;</code>之前的文本都被视为前导命令，会影响整个文档。任何在<code>\end&#123;document&#125;</code> 之后的文本都会被忽视。</p><p>空行不是必要的，但它可以让长的文档更易读。</p><p><span class="math inline">\(\rightarrow\)</span> 按下<strong>Save</strong> 按扭；<spanclass="math inline">\(\rightarrow\)</span> 在<strong>Libraries&gt;Documents</strong> 中新建一个名为 <strong>LaTeXcourse</strong> 文件夹；<span class="math inline">\(\rightarrow\)</span>将你的文档命名为 <strong>Doc1</strong> 并将其保存为 <strong>TeXdocument</strong> 放在这个文件夹中。</p><p>将不同的 LaTeX文档放在不同的目录下，在编译的时候组合多个文件是一个很好的想法。</p><p><span class="math inline">\(\rightarrow\)</span> 确保 typeset菜单设置为了 <strong>xeLaTeX</strong>。<spanclass="math inline">\(\rightarrow\)</span> 点击 <strong>Typeset</strong>按扭。</p><p>这时你的源文件会被转换为 PDF文档，这需要花费一定的时间。在编译结束后，TeXworks 的 PDF查看器会打开并预览生成的文件。PDF 文件会被自动地保存在与 TeX文档相同的目录下。</p><h3 id="处理问题">处理问题</h3><p>如果在你的文档中存在错误，TeXworks 无法创建 PDF文档时，<strong>Typeset</strong>按扭会变成一个红叉，并且底部的终端输出会保持展开。这时：</p><p><span class="math inline">\(\rightarrow\)</span> 点击 <strong>Aborttypesetting</strong> 按扭。<spanclass="math inline">\(\rightarrow\)</span>阅读终端输出的内容，最后一行可能会给出行号表示出现错误的位置。<spanclass="math inline">\(\rightarrow\)</span>找到文档中对应的行并修复错误。<spanclass="math inline">\(\rightarrow\)</span> 再次点击<strong>Typeset</strong> 按扭尝试编译源文件。</p><h3 id="添加文档标题">添加文档标题</h3><p><code>\maketitle</code>命令可以给文档创建标题。你需要指定文档的标题。如果没有指定日期，就会使用现在的时间，作者是可选的。</p><p><span class="math inline">\(\rightarrow\)</span> 在<code>\begin&#123;document&#125;</code> 和 命令后紧跟着输入以下文本：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\title</span>&#123;My First Document&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;My Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br></pre></td></tr></table></figure><p>你的文档现在长成了这样：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,12pt]&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;My First Document&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;My Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">A sentence of text.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span> 点击<strong>Typeset</strong> 按扭，核对生成的 PDF 文档。</p><p>要点笔记：</p><ul><li><code>\today</code>是插入当前时间的命令。你也可以输入一个不同的时间，比如<code>\data&#123;November 2013&#125;</code>。</li><li><strong>article</strong>文档的正文会紧跟着标题之后在同一页上排版。<strong>report</strong>会将标题置为单独的一页。</li></ul><h3 id="章节">章节</h3><p>如果需要的话，你可能想将你的文档分为章（Chatpers）、节（Sections）和小节（Subsections）。下列分节命令适用于<strong>article</strong> 类型的文档：</p><ul><li><code>\section&#123;...&#125;</code></li><li><code>\subsection&#123;...&#125;</code></li><li><code>\subsubsection&#123;...&#125;</code></li><li><code>\paragraph&#123;...&#125;</code></li><li><code>\subparagraph&#123;...&#125;</code></li></ul><p>花括号内的文本表示章节的标题。对于 <strong>report</strong> 和<strong>book</strong> 类型的文档我们还支持 <code>\chapter&#123;...&#125;</code>的命令。</p><p><span class="math inline">\(\rightarrow\)</span> 将 "A sentence oftext." 替换为以下文本：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line">This is the introduction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Methods&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 1&#125;</span><br><span class="line">The first part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 2&#125;</span><br><span class="line">The second part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Results&#125;</span><br><span class="line">Here are my results.</span><br></pre></td></tr></table></figure><p>你的文档会变成</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,12pt]&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;My First Document&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;My Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line">This is the introduction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Methods&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 1&#125;</span><br><span class="line">The first part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 2&#125;</span><br><span class="line">The second part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Results&#125;</span><br><span class="line">Here are my results.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span> 点击<strong>Typeset</strong> 按扭，核对 PDF 文档。应该是长这样的：</p><figure><img src="latex-for-beginners-1.png" alt="p1" /><figcaption aria-hidden="true">p1</figcaption></figure><h3 id="创建标签">创建标签</h3><p>你可以对任意章节命令创建标签，这样他们可以在文档的其他部分被引用。使用<code>\label&#123;labelname&#125;</code> 对章节创建标签。然后输入<code>\ref&#123;labelname&#125;</code> 或者 <code>\pageref&#123;labelname&#125;</code>来引用对应的章节。</p><p><span class="math inline">\(\rightarrow\)</span> 在<code>\subsection&#123;Stage 1&#125;</code> 下面另起一行，输入<code>\label&#123;sec1&#125;</code>。<spanclass="math inline">\(\rightarrow\)</span> 在 <strong>Results</strong>章节输入<code>Referring to section \ref&#123;sec1&#125; on page \pageref&#123;sec1&#125;</code>。</p><p>你的文档会变成这样：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,12pt]&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;My First Document&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;My Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Introduction&#125;</span><br><span class="line">This is the introduction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Methods&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 1&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;sec1&#125;</span><br><span class="line">The first part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsection</span>&#123;Stage 2&#125;</span><br><span class="line">The second part of the methods.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Results&#125;</span><br><span class="line">Here are my results. Referring to section <span class="keyword">\ref</span>&#123;sec1&#125; on page <span class="keyword">\pageref</span>&#123;sec1&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span> 编译并检查 PDF文档（你可能需要连续编译两次）：</p><figure><img src="latex-for-beginners-2.png" alt="p2" /><figcaption aria-hidden="true">p2</figcaption></figure><h3 id="生成目录toc">生成目录（TOC）</h3><p>如果你使用分节命令，那么可以容易地生成一个目录。使用<code>\tableofcontents</code>在文档中创建目录。通常我们会在标题的后面建立目录。</p><p>你可能也想也想更改页码为罗马数字（i,ii,iii）。这会确保文档的正文从第1 页开始。页码可以使用 <code>\pagenumbering&#123;...&#125;</code>在阿拉伯数字和罗马数字见切换。</p><p><span class="math inline">\(\rightarrow\)</span> 在<code>\maketitle</code> 之后输入以下内容：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\pagenumbering</span>&#123;roman&#125;</span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\newpage</span></span><br><span class="line"><span class="keyword">\pagenumbering</span>&#123;arabic&#125;</span><br></pre></td></tr></table></figure><p><code>\newpage</code> 命令会另起一个页面，这样我们就可以看到<code>\pagenumbering</code> 命令带来的影响了。你的文档的前 14行长这样：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,12pt]&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;My First Document&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;My Name&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\pagenumbering</span>&#123;roman&#125;</span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\newpage</span></span><br><span class="line"><span class="keyword">\pagenumbering</span>&#123;arabic&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span>编译并核对文档（可能需要多次编译，下文不赘述）。</p><p>文档的第一页长这样：</p><figure><img src="latex-for-beginners-3.png" alt="p3" /><figcaption aria-hidden="true">p3</figcaption></figure><p>第二页：</p><figure><img src="latex-for-beginners-4.png" alt="p4" /><figcaption aria-hidden="true">p4</figcaption></figure><h2 id="文字处理">文字处理</h2><h3 id="中文字体支持">中文字体支持</h3><p>阅读本文学习 LaTeX 的人，首要学会的自然是 LaTeX的中文字体支持。事实上，让 LaTeX支持中文字体有许多方法。在此我们仅给出最 <strong>简洁</strong>的解决方案：使用 CTeX 宏包。只需要在文档的前导命令部分添加：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[UTF8]&#123;ctex&#125;</span><br></pre></td></tr></table></figure><p>就可以了。在编译文档的时侯使用 <code>xelatex</code>命令，因为它是支持中文字体的。</p><h3 id="字体效果">字体效果</h3><p>LaTeX 有多种不同的字体效果，在此列举一部分：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\textit</span>&#123;words in italics&#125;</span><br><span class="line"><span class="keyword">\textsl</span>&#123;words slanted&#125;</span><br><span class="line"><span class="keyword">\textsc</span>&#123;words in smallcaps&#125;</span><br><span class="line"><span class="keyword">\textbf</span>&#123;words in bold&#125;</span><br><span class="line"><span class="keyword">\texttt</span>&#123;words in teletype&#125;</span><br><span class="line"><span class="keyword">\textsf</span>&#123;sans serif words&#125;</span><br><span class="line"><span class="keyword">\textrm</span>&#123;roman words&#125;</span><br><span class="line"><span class="keyword">\underline</span>&#123;underlined words&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure><img src="latex-for-beginners-5.png" alt="p5" /><figcaption aria-hidden="true">p5</figcaption></figure><p><span class="math inline">\(\rightarrow\)</span>在你的文档中添加更多的文本并尝试各种字体效果。</p><h3 id="彩色字体">彩色字体</h3><p>为了让你的文档支持彩色字体，你需要使用包（package）。你可以引用很多包来增强LaTeX 的排版效果。包引用的命令放置在文档的前导命令的位置（即放在<code>\begin&#123;document&#125;</code> 命令之前）。使用<code>\usepackage[options]&#123;package&#125;</code> 来引用包。其中<strong>package</strong> 是包的名称，而 <strong>options</strong>是指定包的特征的一些参数。</p><p>使用 <code>\usepackage&#123;color&#125;</code> 后，我们可以调用常见的颜色：</p><figure><img src="latex-for-beginners-6.png" alt="p6" /><figcaption aria-hidden="true">p6</figcaption></figure><p>使用彩色字体的代码为</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">\color</span>&#123;colorname&#125;text&#125;</span><br></pre></td></tr></table></figure><p>其中 <strong>colorname</strong>是你想要的颜色的名字，<strong>text</strong>是你的彩色文本内容。注意到示例效果中的黄色与白色是有文字背景色的，这个我们同样可以使用Color 包中的 <code>\colorbox</code> 命令来达到。用法如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\colorbox</span>&#123;colorname&#125;&#123;text&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span> 在<code>\begin&#123;document&#125;</code> 前输入<code>\usepackage&#123;color&#125;</code>。<spanclass="math inline">\(\rightarrow\)</span> 在文档内容中输入<code>&#123;\color&#123;red&#125;fire&#125;</code>。<spanclass="math inline">\(\rightarrow\)</span> 编译并核对 PDF 文档内容。</p><p>单词 fire 应该是红色的。</p><p>你也可以添加一些参数来调用更多的颜色，甚至自定义你需要的颜色。但这部分超出了本书的内容。如果想要获取更多关于彩色文本的内容请阅读LaTeX Wikibook 的 <ahref="http://en.wikibooks.org/wiki/LaTeX/Colors">Colors 章节</a>。</p><h3 id="字体大小">字体大小</h3><p>接下来我们列举一些 LaTeX 的字体大小设定命令：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">normal size words</span><br><span class="line">&#123;<span class="keyword">\tiny</span> tiny words&#125;</span><br><span class="line">&#123;<span class="keyword">\scriptsize</span> scriptsize words&#125;</span><br><span class="line">&#123;<span class="keyword">\footnotesize</span> footnotesize words&#125;</span><br><span class="line">&#123;<span class="keyword">\small</span> small words&#125;</span><br><span class="line">&#123;<span class="keyword">\large</span> large words&#125;</span><br><span class="line">&#123;<span class="keyword">\Large</span> Large words&#125;</span><br><span class="line">&#123;<span class="keyword">\LARGE</span> LARGE words&#125;</span><br><span class="line">&#123;<span class="keyword">\huge</span> huge words&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure><img src="latex-for-beginners-7.png" alt="p7" /><figcaption aria-hidden="true">p7</figcaption></figure><p><span class="math inline">\(\rightarrow\)</span>尝试为你的文本调整字体大小。</p><h3 id="段落缩进">段落缩进</h3><p>LaTeX默认每个章节第一段首行顶格，之后的段落首行缩进。如果想要段落顶格，在要顶格的段落前加<code>\noindent</code>命令即可。如果希望全局所有段落都顶格，在文档的某一位置使用<code>\setlength&#123;\parindent&#125;&#123;0pt&#125;</code>命令，之后的所有段落都会顶格。</p><h3 id="列表">列表</h3><p>LaTeX支持两种类型的列表：有序列表（enumerate）和无序列表（itemize）。列表中的元素定义为<code>\item</code>。列表可以有子列表。</p><p><span class="math inline">\(\rightarrow\)</span>输入下面的内容来生成一个有序列表套无序列表：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> First thing</span><br><span class="line"><span class="keyword">\item</span> Second thing</span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> A sub-thing</span><br><span class="line"><span class="keyword">\item</span> Another sub-thing</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> Third thing</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(\rightarrow\)</span> 编译并核对 PDF文档。</p><p>列表长这样：</p><figure><img src="latex-for-beginners-8.png" alt="p8" /><figcaption aria-hidden="true">p8</figcaption></figure><p>可以使用方括号参数来修改无序列表头的标志。例如，<code>\item[-]</code>会使用一个杠作为标志，你甚至可以使用一个单词，比如<code>\item[One]</code>。</p><p>下面的代码：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span>[-] First thing</span><br><span class="line"><span class="keyword">\item</span>[+] Second thing</span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span>[Fish] A sub-thing</span><br><span class="line"><span class="keyword">\item</span>[Plants] Another sub-thing</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span>[Q] Third thing</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure><p>生成的效果为</p><figure><img src="latex-for-beginners-9.png" alt="p9" /><figcaption aria-hidden="true">p9</figcaption></figure><h3 id="注释和空格">注释和空格</h3><p>我们使用 %创建一个单行注释，在这个字符之后的该行上的内容都会被忽略，直到下一行开始。</p><p>下面的代码：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">It is a truth universally acknowledged<span class="comment">% Note comic irony</span></span><br><span class="line">in the very first sentence</span><br><span class="line">, that a single man in possession of a good fortune, must</span><br><span class="line">be in want of a wife.</span><br></pre></td></tr></table></figure><p>生成的结果为</p><figure><img src="latex-for-beginners-10.png" alt="p10" /><figcaption aria-hidden="true">p10</figcaption></figure><p>多个连续空格在 LaTeX中被视为一个空格。多个连续空行被视为一个空行。空行的主要功能是开始一个新的段落。通常来说，LaTeX忽略空行和其他空白字符，两个反斜杠（<code>\\</code>）可以被用来换行。</p><p><span class="math inline">\(\rightarrow\)</span>尝试在你的文档中添加注释和空行。</p><p>如果你想要在你的文档中添加空格，你可以使用 <code>\vaspace&#123;...&#125;</code>的命令。这样可以添加竖着的空格，高度可以指定。如<code>\vspace&#123;12pt&#125;</code> 会产生一个空格，高度等于 12pt的文字的高度。</p><h3 id="特殊字符">特殊字符</h3><p>下列字符在 LaTeX 中属于特殊字符：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># $ % ^ &amp; _ &#123; &#125; ~ \</span><br></pre></td></tr></table></figure><p>为了使用这些字符，我们需要在他们前面添加反斜杠进行转义：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\#</span> <span class="keyword">\$</span> <span class="keyword">\%</span> <span class="keyword">\^</span>&#123;&#125; <span class="keyword">\&amp;</span> <span class="keyword">\_</span> <span class="keyword">\&#123;</span> <span class="keyword">\&#125;</span> <span class="keyword">\~</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意在使用 <code>^</code> 和 <code>~</code>字符的时侯需要在后面紧跟一对闭合的花括号，否则他们就会被解释为字母的上标，就像<code>\^ e</code> 会变成 <span class="math inline">\(\mathrm{\hat{e}}\)</span>。上面的代码生成的效果如下：</p><figure><img src="latex-for-beginners-11.png" alt="p11" /><figcaption aria-hidden="true">p11</figcaption></figure><p>注意，反斜杠不能通过反斜杠转义（不然就变成了换行了），使用<code>\textbackslash</code> 命令代替。</p><p><span class="math inline">\(\rightarrow\)</span>输入代码来在你的文档中生成下面内容：</p><figure><img src="latex-for-beginners-12.png" alt="p12" /><figcaption aria-hidden="true">p12</figcaption></figure><p>询问专家或者查看本书的 TeX 源代码获取帮助。</p><h2 id="表格">表格</h2><p>表格（tabular）命令用于排版表格。LaTeX默认表格是没有横向和竖向的分割线的——如果你需要，你得手动设定。LaTeX会根据内容自动设置表格的宽度。下面的代码可以创一个表格：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;...&#125;</span><br></pre></td></tr></table></figure><p>省略号会由定义表格的列的代码替换：</p><ul><li><code>l</code> 表示一个左对齐的列；</li><li><code>r</code> 表示一个右对齐的列；</li><li><code>c</code> 表示一个向中对齐的列；</li><li><code>|</code> 表示一个列的竖线；</li></ul><p>例如，<code>&#123;lll&#125;</code>会生成一个三列的表格，并且保存向左对齐，没有显式的竖线；<code>&#123;|l|l|r|&#125;</code>会生成一个三列表格，前两列左对齐，最后一列右对齐，并且相邻两列之间有显式的竖线。</p><p>表格的数据在 <code>\begin&#123;tabular&#125;</code> 后输入：</p><ul><li><code>&amp;</code> 用于分割列；</li><li><code>\\</code> 用于换行；</li><li><code>\hline</code> 表示插入一个贯穿所有列的横着的分割线；</li><li><code>\cline&#123;1-2&#125;</code>会在第一列和第二列插入一个横着的分割线。</li></ul><p>最后使用 <code>\end&#123;tabular&#125;</code> 结束表格。举一些例子：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|l|l|&#125;</span><br><span class="line">Apples <span class="built_in">&amp;</span> Green <span class="keyword">\\</span></span><br><span class="line">Strawberries <span class="built_in">&amp;</span> Red <span class="keyword">\\</span></span><br><span class="line">Orange <span class="built_in">&amp;</span> Orange<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;rc&#125;</span><br><span class="line">Apples <span class="built_in">&amp;</span> Green<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span> </span><br><span class="line">Strawberries <span class="built_in">&amp;</span> Red <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\cline</span>&#123;1-1&#125;</span><br><span class="line">Oranges <span class="built_in">&amp;</span> Orange <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|r|l|&#125;</span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">8 <span class="built_in">&amp;</span> here&#x27;s <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\cline</span>&#123;2-2&#125;</span><br><span class="line">86 <span class="built_in">&amp;</span> stuff<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span> <span class="keyword">\hline</span> </span><br><span class="line">2008 <span class="built_in">&amp;</span> now <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span> </span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure><img src="latex-for-beginners-13.png" alt="p13" /><figcaption aria-hidden="true">p13</figcaption></figure><h3 id="实践">实践</h3><p>尝试画出下列表格：</p><figure><img src="latex-for-beginners-14.png" alt="p14" /><figcaption aria-hidden="true">p14</figcaption></figure><h2 id="图表">图表</h2><p>本章介绍如何在 LaTeX 文档中插入图表。这里我们需要引入<strong>graphicx</strong> 包。图片应当是 PDF，PNG，JPEG 或者 GIF文件。下面的代码会插入一个名为 myimage 的图片：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=1<span class="keyword">\textwidth</span>]&#123;myimage&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;Here is my image&#125;</span><br><span class="line"><span class="keyword">\label</span>&#123;image-myimage&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure><p><code>[h]</code> 是位置参数，<strong>h</strong>表示把图表近似地放置在这里（如果能放得下）。有其他的选项：<strong>t</strong>表示放在在页面顶端；<strong>b</strong>表示放在在页面的底端；<strong>p</strong>表示另起一页放置图表。你也可以添加一个 <strong>!</strong>参数来强制放在参数指定的位置（尽管这样排版的效果可能不太好）。</p><p><code>\centering</code>将图片放置在页面的中央。如果没有该命令会默认左对齐。使用它的效果是很好的，因为图表的标题也是居中对齐的。</p><p><code>\includegraphics&#123;...&#125;</code>命令可以自动将图放置到你的文档中，图片文件应当与 TeX文件放在同一目录下。</p><p><code>[width=1\textwidth]</code>是一个可选的参数，它指定图片的宽度——与文本的宽度相同。宽度也可以以厘米为单位。你也可以使用<code>[scale=0.5]</code> 将图片按比例缩小（示例相当于缩小一半）。</p><p><code>\caption&#123;...&#125;</code> 定义了图表的标题。如果使用了它，LaTeX会给你的图表添加“Figure”开头的序号。你可以使用<code>\listoffigures</code> 来生成一个图表的目录。</p><p><code>\label&#123;...&#125;</code> 创建了一个可以供你引用的标签。</p><h3 id="实践-1">实践</h3><p><span class="math inline">\(\rightarrow\)</span>在你文档的前导命令中添加 <code>\usepackage&#123;graphicx&#125;</code>。<spanclass="math inline">\(\rightarrow\)</span> 找到一张图片，放置在你的<strong>LaTeX course</strong> 文件夹下。<spanclass="math inline">\(\rightarrow\)</span>在你想要添加图片的地方输入以下内容：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h!]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=1<span class="keyword">\textwidth</span>]&#123;ImageFilename&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;My test image&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure><p>将 <strong>ImageFilename</strong>替换为你的文件的名字（不包括后缀）。如果你的文件名有空格，就使用双引号包裹，比如<code>"screen 20"</code>。</p><p><span class="math inline">\(\rightarrow\)</span> 编译并核对文件。</p><h2 id="公式">公式</h2><p>使用 LaTeX的主要原因之一是它可以方便地排版公式。我们使用数学模式来排版公式。</p><h3 id="插入公式">插入公式</h3><p>你可以使用一对 <code>$</code>来启用数学模式，这可以用于撰写行内数学公式。例如 <code>$1+2=3$</code>的生成效果是 <span class="math inline">\(1+2=3\)</span>。</p><p>如果你想要行间的公式，可以使用 <code>$$...$$</code>（现在我们推荐使用<code>\[...\]</code>，因为前者可能产生不良间距）。例如，<code>$$1+2=3$$</code>的生产效果为</p><p><span class="math display">\[1+2=3\]</span></p><p>如果是生成带标号的公式，可以使用<code>\begin&#123;equation&#125;...\end&#123;equation&#125;</code>。例如<code>\begin&#123;equation&#125;1+2=3\end&#123;equation&#125;</code> 生成的效果为：</p><p><span class="math display">\[\begin{equation}1+2=3\end{equation}\]</span></p><p>数字 6 代表的是章节的编号，仅当你的文档有设置章节时才会出现，比如<strong>report</strong> 类型的文档。</p><p>使用 <code>\begin&#123;eqnarray&#125;...\end&#123;eqnarray&#125;</code>来撰写一组带标号的公式。例如：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;eqnarray&#125;</span><br><span class="line">a <span class="built_in">&amp;</span> = <span class="built_in">&amp;</span> b + c <span class="keyword">\\</span></span><br><span class="line">  <span class="built_in">&amp;</span> = <span class="built_in">&amp;</span> y - z</span><br><span class="line"><span class="keyword">\end</span>&#123;eqnarray&#125;</span><br></pre></td></tr></table></figure><p>生成的效果为</p><p><span class="math display">\[\begin{eqnarray}a &amp; = &amp; b + c \\  &amp; = &amp; y - z\end{eqnarray}\]</span></p><p>要撰写不标号的公式就在环境标志的后面添加 <code>*</code> 字符，如<code>&#123;equation*&#125;</code>，<code>&#123;eqnarray*&#125;</code>。</p><h3 id="数学符号">数学符号</h3><p>尽管一些基础的符号可以直接键入，但大多数特殊符号需要使用命令来显示。</p><p>本书只是数学符号使用的入门教程，LaTeX Wikibook的数学符号章节是另一个更好更完整的教程。如果想要了解更多关于数学符号的内容请移步。如果你想找到一个特定的符号，可以使用<ahref="http://detexify.kirelabs.org">Detexfiy</a>，它可以识别手写字符。</p><h4 id="上标和下标">上标和下标</h4><p>上标（Powers）使用 <code>^</code> 来表示，比如 <code>$n^2$</code>生成的效果为 <span class="math inline">\(n^2\)</span>。</p><p>下标（Indices）使用 <code>_</code> 表示，比如 <code>$2_a$</code>生成的效果为 <span class="math inline">\(2_a\)</span>。</p><p>如果上标或下标的内容包含多个字符，请使用花括号包裹起来。比如<code>$b_&#123;a-2&#125;$</code> 的效果为 <spanclass="math inline">\(b_{a-2}\)</span>。</p><h4 id="分数">分数</h4><p>分数使用 <code>\frac&#123;numerator&#125;&#123;denominator&#125;</code> 命令插入。比如<code>$$\frac&#123;a&#125;&#123;3&#125;$$</code> 的生成效果为</p><p><span class="math display">\[\frac{a}{3}\]</span></p><p>分数可以嵌套。比如 <code>$$\frac&#123;y&#125;&#123;\frac&#123;3&#125;&#123;x&#125;+b&#125;$$</code>的生成效果为</p><p><span class="math display">\[\frac{y}{\frac{3}{x}+b}\]</span></p><h4 id="根号">根号</h4><p>我们使用 <code>\sqrt&#123;...&#125;</code>命令插入根号。省略号的内容由被开根的内容替代。如果需要添加开根的次数，使用方括号括起来即可。</p><p>例如 <code>$$\sqrt&#123;y^2&#125;$$</code> 的生成效果为</p><p><span class="math display">\[\sqrt{y^2}\]</span></p><p>而 <code>$$\sqrt[x]&#123;y^2&#125;$$</code> 的生成效果为</p><p><span class="math display">\[\sqrt[x]{y^2}\]</span></p><h4 id="求和与积分">求和与积分</h4><p>使用 <code>\sum</code> 和 <code>\int</code>来插入求和式与积分式。对于两种符号，上限使用 <code>^</code>来表示，而下限使用 <code>_</code> 表示。</p><p><code>$$\sum_&#123;x=1&#125;^5 y^z$$</code> 的生成效果为</p><p><span class="math display">\[\sum_{x=1}^5y^z\]</span></p><p>而 <code>$$\int_a^b f(x)$$</code> 的生成效果为</p><p><span class="math display">\[\int_a^b f(x)\]</span></p><h4 id="希腊字母">希腊字母</h4><p>我们可以使用反斜杠加希腊字母的名称来表示一个希腊字母。名称的首字母的大小写决定希腊字母的形态。例如</p><ul><li><code>$\alpha$</code>=<spanclass="math inline">\(\alpha\)</span></li><li><code>$\beta$</code>=<span class="math inline">\(\beta\)</span></li><li><code>$\delta, \Delta$</code>=<span class="math inline">\(\delta,\Delta\)</span></li><li><code>$\pi, \Pi$</code>=<span class="math inline">\(\pi,\Pi\)</span></li><li><code>$\sigma, \Sigma$</code>=<span class="math inline">\(\sigma,\Sigma\)</span></li><li><code>$\phi, \Phi, \varphi$</code>=<span class="math inline">\(\phi,\Phi, \varphi\)</span></li><li><code>$\psi, \Psi$</code>=<span class="math inline">\(\psi,\Psi\)</span></li><li><code>$\omega, \Omega$</code>=<span class="math inline">\(\omega,\Omega\)</span></li></ul><h3 id="实践-2">实践</h3><p><span class="math inline">\(\rightarrow\)</span>撰写代码来生成下列公式：</p><figure><img src="latex-for-beginners-15.png" alt="p15" /><figcaption aria-hidden="true">p15</figcaption></figure><p>如果需要帮助，可以查看本书的 TeX 源码。</p><h2 id="参考文献">参考文献</h2><h3 id="介绍-1">介绍</h3><p>LaTeX 可以轻松插入参考文献以及目录。本文会介绍如何使用另一个 BibTeX文件来存储参考文献。</p><h3 id="bibtex-文件类型">BibTeX 文件类型</h3><p>BibTeX 文件包含了所有你想要在你文档中引用的文献。它的文件后缀名为<code>.bib</code>。它的名字应设置为你的 TeX文档的名字。<code>.bib</code>文件是文本文件。你需要将你的参考文献按照下列格式输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;</span><br><span class="line">    Birdetal2001,</span><br><span class="line">    Author = &#123;Bird, R. B. and Smith, E. A. and Bird, D. W.&#125;,</span><br><span class="line">    Title = &#123;The hunting handicap: costly signaling in human foraging strategies&#125;,</span><br><span class="line">    Journal = &#123;Behavioral Ecology and Sociobiology&#125;,</span><br><span class="line">    Volume = &#123;50&#125;,</span><br><span class="line">    Pages = &#123;9-19&#125;,</span><br><span class="line">    Year = &#123;2001&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个参考文献先声名它的文献类型（reference type）。示例中使用的是<span class="citation"data-cites="article">@article</span>，其他的类型包括 <spanclass="citation" data-cites="book">@book</span>，<span class="citation"data-cites="incollection">@incollection</span>用于引用一本书的中的章节，<span class="citation"data-cites="inproceedings">@inproceedings</span> 用于引用会议论文。可以<ahref="http://en.wikibooks.org/wiki/LaTeX/Bibliography_Management">在此</a>查看更多支持的类型。</p><p>接下来的花括号内首先要列出一个引用键值（citationkey）。必须保证你引用的文献的引用键值是不同的。你可以自定义键值串，不过使用第一作者名字加上年分会是一个表义清晰的选择。</p><p>接下来的若干行包括文献的若干信息，格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field name = &#123;field contents&#125;,</span><br></pre></td></tr></table></figure><p>你可以使用 LaTeX 命令来生成特殊的文字效果。比如意大利斜体可以使用<code>\emph&#123;Rattus norvegicus&#125;</code>。</p><p>对于需要大写的字母，请用花括号包裹起来。BibTeX会自动把标题中除第一个字母外所有大写字母替换为小写。比如<code>Dispersal in the contemporary United States</code> 的生成效果为<span class="math inline">\(\text{Dispersal in the contemporary unitedstates}\)</span>，而<code>Dispersal in the contemporary &#123;U&#125;nited &#123;S&#125;tates</code>的生成效果为 <span class="math inline">\(\text{Dispersal in thecontemporary United States}\)</span>。</p><p>你可以手写 BibTeX 文件，也可以使用软件来生成。</p><h3 id="插入文献列表">插入文献列表</h3><p>使用下列命令在文档当前位置插入文献列表：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plain&#125;</span><br><span class="line"><span class="keyword">\bibliography</span>&#123;references&#125;</span><br></pre></td></tr></table></figure><p>参考文献写在 <code>references.bib</code> 里。</p><h3 id="参考文献标注">参考文献标注</h3><p>使用 <code>\cite&#123;citationkey&#125;</code>来在你想要引用文献的地方插入一个标注。如果你不希望在正文中插入一个引用标注，但仍想要在文献列表中显示这次引用，使用<code>\nocite&#123;citationkey&#125;</code> 命令。</p><p>想要在引用中插入页码信息，使用方括号：<code>\cite[p. 215]&#123;citationkay&#125;</code>。</p><p>要引用多个文献，使用逗号分隔：<code>\cite&#123;citation01,citation02,citation03&#125;</code>。</p><h3 id="引用格式">引用格式</h3><h4 id="数字标号引用">数字标号引用</h4><p>LaTeX 包含了多种行内数字标号引用的格式：</p><p><strong>Plain</strong> 方括号包裹数字的形式，如 <spanclass="math inline">\([1]\)</span>。文献列表按照第一作者的字母表顺序排列。每一个作者的名字是全称。</p><p><strong>Abbrv</strong> 与 <strong>plain</strong>是相同的，但作者的名字是缩写。</p><p><strong>Unsrt</strong> 与 <strong>plain</strong>是相同的，但文献列表的排序按照在文中引用的先后顺序排列。</p><p><strong>Alpha</strong> 与 <strong>plain</strong>一样，但引用的标注是作者的名字与年份组合在一起，不是数字，如 <spanclass="math inline">\([Kop10]\)</span>。</p><h4 id="作者日期引用">作者日期引用</h4><p>如果你想使用作者日期的引用，使用 <strong>natbib</strong> 包。它使用<code>\citep&#123;...&#125;</code> 命令来生成一个方括号标注，如 <spanclass="math inline">\([Koppe,2010]\)</span>，使用<code>\citet&#123;...&#125;</code> 来生成一个标注，只把年份放到方括号里，如 <spanclass="math inline">\(Koppe [2010]\)</span>。<ahref="http://mirror.ctan.org/macros/latex/contrib/natbib/natnotes.pdf">在此</a>查看它的更多用法。</p><p>Natbib包也有三种格式：<strong>plainnat</strong>，<strong>abbrvnat</strong> 和<strong>unsrtnat</strong>，他们与<strong>plain</strong>，<strong>abbrv</strong> 和 <strong>unsrt</strong>的效果是一样的。</p><h4 id="其他引用格式">其他引用格式</h4><p>如果你需要使用不同的格式，你需要在同一个文件夹下创建一个格式文件（<code>.bst</code>文件），引用这个格式的时侯使用它的文件名调用<code>\bibliographystyle&#123;...&#125;</code> 命令实现。</p><h3 id="实践-3">实践</h3><p><span class="math inline">\(\rightarrow\)</span>在同一文件夹下新建一个同名的 BibTeX文件，用正确的格式输入参考文献的信息。<spanclass="math inline">\(\rightarrow\)</span> 切换到 TeX 文档，并使用<code>\cite</code>，<code>\bibliographystyle</code> 和<code>\bibliograph</code> 命令来引用文献。<spanclass="math inline">\(\rightarrow\)</span> 编译 TeX 文件。<spanclass="math inline">\(\rightarrow\)</span> 切换到 BibTeX文件，并编译（点击 <strong>Typeset</strong> 按扭）<spanclass="math inline">\(\rightarrow\)</span> 切换到 TeX 文件并编译它<strong>两次</strong>，然后核对 PDF 文档。</p><h2 id="更多阅读">更多阅读</h2><p>一份（不太）简短的 LATEX 2ε 介绍 <ahref="https://github.com/CTeX-org/lshort-zh-cn/releases/download/v6.02/lshort-zh-cn.pdf"class="uri">https://github.com/CTeX-org/lshort-zh-cn/releases/download/v6.02/lshort-zh-cn.pdf</a>或 112 分钟了解 LaTeX 2ε.</p><p>LaTeX Project <a href="http://www.latex-project.org/"class="uri">http://www.latex-project.org/</a> Official website - haslinks to documentation, information about installing LATEX on your owncomputer, and information about where to look for help.</p><p>LaTeX Wikibook <a href="http://en.wikibooks.org/wiki/LaTeX/"class="uri">http://en.wikibooks.org/wiki/LaTeX/</a> Comprehensive andclearly written, although still a work in progress. A downloadable PDFis also available.</p><p>Comparison of TeX Editors on Wikipedia <ahref="http://en.wikipedia.org/wiki/Comparison_of_TeX_editors"class="uri">http://en.wikipedia.org/wiki/Comparison_of_TeX_editors</a>Information to help you to choose which L A TEX editor to install onyour own computer.</p><p>TeX Live <a href="http://www.tug.org/texlive/"class="uri">http://www.tug.org/texlive/</a>“An easy way to get up andrunning with the TeX document production system”。Available for Unix andWindows (links to MacTeX for MacOSX users). Includes the TeXworkseditor.</p><p>Workbook Source Files <a href="http://edin.ac/17EQPM1"class="uri">http://edin.ac/17EQPM1</a> Download the .tex file and otherfiles needed to compile this workbook.</p><p><strong>本文译自 <ahref="http://www.docs.is.ed.ac.uk/skills/documents/3722/3722-2014.pdf"class="uri">http://www.docs.is.ed.ac.uk/skills/documents/3722/3722-2014.pdf</a></strong>，依据其他文献略有修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;h3 id=&quot;什么是-latex&quot;&gt;什么是 LaTeX&lt;/h3&gt;
&lt;p&gt;LaTeX（读作/ˈlɑːtɛx/或/ˈleɪtɛx/）是一个让你的文档看起来更专业的排版系统，而不是文字处理器。它尤其适合处理篇幅较长、结构严谨的文档，并且十分擅长</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>数据平台DA@IDSM</title>
    <link href="https://dsis-scss.github.io/wiki/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0DA-IDSM/"/>
    <id>https://dsis-scss.github.io/wiki/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0DA-IDSM/</id>
    <published>2022-09-02T07:03:22.000Z</published>
    <updated>2022-09-03T11:43:51.121Z</updated>
    
    <content type="html"><![CDATA[<p>DA@IDSM 是一个高效的数据存储分析平台。截止2022年4月，平台共存储了近32 万条云盘订阅信息以及近 16 亿条云盘负载信息。平台使用 Elasticsearch提供基本的查询服务，并结合 Django + Nginx 实现的 API接口来提供常用的数据分析服务。</p><h3 id="如何使用">如何使用</h3><p>在连接 HUST 校园网之后，打开浏览器输入下面的 url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://222.20.96.147:49083/api/subscription/diskinfo?cluster_id=20_1360900&amp;buss_name=游戏&amp;disk_type=data&amp;all=true&amp;limit=3</span><br></pre></td></tr></table></figure><p>它将返回如下信息（敏感信息已隐藏）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">152470</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;app_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;125xxxxxx56&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7eexxxxx-xxxx-xxxx-xxxx-xxxxx54703cb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cluster_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx_xxxxx00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;inst_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;disk-rcxxxxob&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;vm_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;071axxxx-xxxx-xxxx-xxxx-xxxxx8515eaa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;create_date_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-04-22&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;expire_date_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-09-22&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;life_stat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is_local&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_attr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;is_vip&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pay_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prepay&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pay_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;vm_alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx_TEST游戏服务器6&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;vm_cpu&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;vm_mem&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;app_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx_TEST游戏服务器&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;project_name&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;未命名_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_usage&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disk_size&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解析：222.20.96.147 为实验室服务器网关地址， 49083 为本数据平台 API接口的端口号。该请求返回仓库号为 <code>20_1360900</code>、 磁盘类型为<code>data</code>、业务标签中含有 「游戏」字段的前三个云盘订阅信息。</p><h3 id="它能做些什么">它能做些什么</h3><p>数据平台支持快速的时序数据处理，目前平台内已经支持对海量云盘负载数据的分析计算。</p><p>如果你需要经常写一些分析程序来处理数据，或者生成一些数据分析图像，那么这个平台将非常有用。同时，这些数据也使得多人共享更为方便。</p><h3 id="总体结构">总体结构</h3><p>目前平台的总体结构如下图所示：</p><p><img title="" src="pic1.png" alt="" data-align="left" width="600"></p><p>云盘订阅信息是非时序数据，放在 MySQL 中，云盘负载信息是时序数据，放在ElasticSearch 中。常用的数据处理需求由 Django 实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DA@IDSM 是一个高效的数据存储分析平台。截止2022年4月，平台共存储了近
32 万条云盘订阅信息以及近 16 亿条云盘负载信息。平台使用 Elasticsearch
提供基本的查询服务，并结合 Django + Nginx 实现的 API
接口来提供常用的数据分析服</summary>
      
    
    
    
    <category term="资源" scheme="https://dsis-scss.github.io/categories/resource/"/>
    
    <category term="数据" scheme="https://dsis-scss.github.io/categories/resource/%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习学习笔记（持续更新）</title>
    <link href="https://dsis-scss.github.io/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://dsis-scss.github.io/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-01T03:00:00.000Z</published>
    <updated>2022-09-03T11:43:51.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-is-ml">What is ML?</h1><p>In short, ML is to Look for a function and to obtain an answer to acertain question, applied in speech recognition, image recognition.</p><hr /><h2 id="different-types-of-ml">Different types of ML</h2><ol type="1"><li><p>Regression: output a scalar.</p></li><li><p>Classification: given classes, output correct one. E.g. alphago.</p></li><li><h2id="structured-learningcreate-something-with-a-structure.">Structuredlearning：create something with a structure.</h2></li></ol><h2 id="how-to-find-a-function">How to find a function?</h2><ol type="1"><li><p>Give a function with unknown paraments, called model. <spanclass="math display">\[y = b+wx_1\]</span> Symbol <span class="math inline">\(x_1\)</span> is calledfeature.Symbol <span class="math inline">\(w\)</span> and <spanclass="math inline">\(b\)</span> represent weight and bias.</p></li><li><p>Define loss from Training Data. Loss is a function of parameters<span class="math inline">\(b\)</span> and <spanclass="math inline">\(w\)</span>. It evaluates how good a set of valuesis. Paint error surface.</p></li><li><p>Optimization: Gradient Descent for example.</p><p class="note note-success"><p>The process of finding a function is called training.</p></p><hr /></li></ol><h2 id="new-model">New model</h2><p>Sometimes linear functions are inaccurate, so we need to use a newmodel to construct function with parameters. ### From linear model, topiecewise linear model. Use Sigmoid Function to approximately expressHard Sigmoid Function, and add multiple Sigmoid Function to expresspiecewise linear model. <img src="ml1p1.png" /> <img src="ml1p2.png" />Then we can express function as: <span class="math display">\[y = b + \sum_ic_i\ sigmoid(b_i+\sum_jw_{ij}x_j)\]</span> We use vector <span class="math inline">\(\theta\)</span> toexpress all the parameters in the function above, then the Loss functioncan be expressed as <span class="math inline">\(L(\theta)\)</span>.After that, we do the optimization to find the <spanclass="math inline">\(\theta^*\)</span> satisfying <spanclass="math inline">\(\theta^*=arg\ {min}_{\theta}\ L\)</span></p><hr /><h1 id="what-is-the-general-guide-on-ml">What is the general guide onML?</h1><hr /><h2 id="a-general-guide">A general guide</h2><p>It can be described as the picture followed. <imgsrc="ml2p1.png" /></p><h3 id="large-training-loss">Large training loss</h3><p>Training loss is large. It may result from:</p><h4 id="model-bias">1. Model bias</h4><p>It means that the model is too simple.<strong><em>Solution</em></strong>: redesign more features or deeplearning</p><h4 id="optimization-issue">2. Optimization issue</h4><p><strong>How to know whether optimization causes a large trainingloss?</strong> Start from shallower networks (or other models), whichare easier to optimize. If deeper networks do not obtain smaller loss ontraining data, then there is optimization issue.</p><hr /><h3 id="small-training-loss-but-large-testing-loss.">Small trainingloss, but large testing loss.</h3><p>Testing loss is large. It may result from: #### 1. OverfittingOverfitting occurs when loss is small on training data, but large ontesting data. <strong><em>Solutions</em></strong>: a. more trainingdata, or data augmentation; b. Constrained model: model has lessflexibility.</p><p><img src="ml2p2.png" /></p><p><strong><em>Bias-complexity trade-off</em></strong> Cross validation:divide training set into training set and validation set. Use validationset to test the loss of the function obtained from training data set.How to split the training set? N-fold cross validation</p><h4 id="mismatch">2.Mismatch</h4><p>Mismatch occurs when your training data and testing data havedifferent distributions.Its difference from overfitting is that moretraining data can not obtain a better result.</p><hr /><h2 id="how-to-find-a-function-1">How to find a function?</h2><ol type="1"><li><p>Give a function with unknown paraments, called model. <spanclass="math display">\[y = b+wx_1\]</span> Symbol <span class="math inline">\(x_1\)</span> is calledfeature.Symbol <span class="math inline">\(w\)</span> and <spanclass="math inline">\(b\)</span> represent weight and bias.</p></li><li><p>Define loss from Training Data. Loss is a function of parameters<span class="math inline">\(b\)</span> and <spanclass="math inline">\(w\)</span>. It evaluates how good a set of valuesis. Paint error surface.</p></li><li><p>Optimization: Gradient Descent for example.</p><p class="note note-success"><p>The process of finding a function is called training.</p></p><hr /></li></ol><h2 id="new-model-1">New model</h2><p>Sometimes linear functions are inaccurate, so we need to use a newmodel to construct function with parameters. ### From linear model, topiecewise linear model. Use Sigmoid Function to approximately expressHard Sigmoid Function, and add multiple Sigmoid Function to expresspiecewise linear model.</p><p><img src="ml1p1.png" alt="p1" /> <img src="ml1p2.png" alt="p2" /></p><p>Then we can express function as: <span class="math display">\[y = b + \sum_ic_i\ sigmoid(b_i+\sum_jw_{ij}x_j)\]</span> We use vector <span class="math inline">\(\theta\)</span> toexpress all the parameters in the function above, then the Loss functioncan be expressed as <span class="math inline">\(L(\theta)\)</span>.After that, we do the optimization to find the <spanclass="math inline">\(\theta^*\)</span> satisfying <spanclass="math inline">\(\theta^*=arg\ {min}_{\theta}\ L\)</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;what-is-ml&quot;&gt;What is ML?&lt;/h1&gt;
&lt;p&gt;In short, ML is to Look for a function and to obtain an answer to a
certain question, applied in spe</summary>
      
    
    
    
    <category term="知识" scheme="https://dsis-scss.github.io/categories/knowledge/"/>
    
    <category term="机器学习" scheme="https://dsis-scss.github.io/categories/knowledge/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>VSCode 快速上手</title>
    <link href="https://dsis-scss.github.io/wiki/vscode/"/>
    <id>https://dsis-scss.github.io/wiki/vscode/</id>
    <published>2022-08-27T11:23:05.000Z</published>
    <updated>2022-09-03T11:43:51.109Z</updated>
    
    <content type="html"><![CDATA[<p>先善其事必先利其器，使用一款好的编译器对于我们工作学习来说是至关重要的。不论你使用的是Windows 、Mac OS 还是 Linux，我们都推荐使用 VS code(Visual Studio code)编辑器。它是微软开发的一款开源跨平台编辑器，几乎在任何系统(甚至网页上)编辑任何语言的代码。得益于其活跃的社区，VScode 拥有非常丰富的插件，这些插件也使得我们编码体验变得更加友好。</p><h2 id="安装">安装</h2><p>进入官网<a href="https://code.visualstudio.com/download">下载</a></p><p><img title="" src="1_download.png" alt="" data-align="center" width="700"></p><p>点击下载 User 的 64 bit 版本。</p><p><strong>后序安装中，下图中的两个选项都勾选上，这样后面可以直接通过文件夹打开vs code：</strong></p><p><img title="" src="2_download_config.png" alt="" data-align="center" width="500"></p><h2 id="配置-c-调试运行">配置 C++ 调试运行</h2><h3 id="安装-c-运行环境">安装 C++ 运行环境</h3><p>C++ 有很多编辑器，Clang、GNU C++、MSVC等等。我们这里安装 GNU C++，在Windows 中，直接安装 MinGW（Minimalist GNU on Windows）即可。如果你是MacOS 用户，可以通过安装 <ahref="https://segmentfault.com/a/1190000018045211">Command LineToools</a> 来进行配置。</p><p>MinGW 推荐到 <ahref="https://sourceforge.net/projects/mingw-w64/files/">SourceForge</a>进行下载, 选择 8.1.0 版本的 x86_64-posix-seh资源包文件（64位操作系统，启用 C++ 11多线程特性等）。另外，如果想要使用最新版 GCC-11.2（支持 C++20，但对某些机型可能不适配，谨慎使用），可以到这里<ahref="https://pan.baidu.com/s/1JwOvWrUV4bSrP63fd8A3vA?pwd=bjvi">下载</a>。</p><p>下载完成之后，直接拷贝到 G盘（或其他盘，根据自己情况来调整）根目录下，然后将下图中的路径（g++.exe所在目录路径）复制到剪贴板：</p><p><img title="" src="3_gcc_config.png" alt="" data-align="center" width="600"></p><p>注意，图中的 MinGW 安装在 G 盘，你需要找到你的 MinGW 路径，打开其中的bin 文件夹，复制其路径即可。 然后，将复制的路径追加到 path环境变量中，示意图如下：</p><p><img title="" src="4_env_config.png" alt="" data-align="center" width="400"></p><p><img title="" src="5_env_config.png" alt="" data-align="center" width="1200"></p><ul><li>如果你在上面的过程中遇到了问题，可以参考该链接中提供的方法：https://new.qq.com/omn/20211202/20211202A08CCW00.html</li><li>如果你是 win7用户，同样可以通过百度来找到对应的修改办法，但要特别注意追加环境变量时的逗号分隔符是英文。</li></ul><p>配置环境变量是为了在其他地方都可以用到 bin 目录下的 exe 文件（例如g++.exe）。</p><p>你可通过以下方式检验是否安装成功：</p><p><img title="" src="6_env_test.png" alt="" data-align="center" width="600"></p><p>如果你测试的结果与上面的不同，说明环境变量配置失败了，需要重新检查一下前面的步骤，如果实在不行，不妨重启一下电脑试试。</p><h3 id="配置-vs-code-运行环境">配置 VS Code 运行环境</h3><p>到了最复杂的一步，由于 VS Code有着庞大的社区，各种各样的插件、配置会让你感觉到眼花缭乱。这里首先教大家如何在VS Code 中通过命令行终端（Terminal）中编译运行 C++代码，然后再配置如何实现单步调试功能。</p><h4 id="安装插件">安装插件</h4><p>在这一步，你需要用各种插件来丰富你的 VS Code。打开 VSCode，在左侧工具栏中寻找下图样式的按钮（不要在意按钮的顺序，因为图中已经安装了很多别的插件）然后在搜索框中输入对应的插件名，点击下载按钮即可。</p><p><img title="" src="7_install_plugin.png" alt="" data-align="center" width="700"></p><ol type="1"><li><p>汉化插件 Chinese<img title="" src="8_plugin.png" alt="" data-align="center" width="700"></p></li><li><p>C/C++ 插件<img title="" src="9_plugin.png" alt="" data-align="center" width="700"></p></li><li><p>Code Runner<img title="" src="10_plugin.png" alt="" data-align="center" width="700">安装完 Code Runner之后，我们点击右下角的设置按钮，进入「扩展设置」（或者通过右上角的「文件」-「首选项」-「设置」-「搜索框中输入Code Runner 进行查找」）。找到下图中的三项设置，勾上对钩。<img title="" src="11_coderunner_setting.png" alt="" data-align="center" width="700">然后找到下图中的设置项，点进去 settings.json，设置我们运行 C++时的编译命令<img title="" src="12_coderunner_setting.png" alt="" data-align="center" width="700">点击去之后，添加如下设置代码： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">        &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br><span class="line">        &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 如果你发现点进去之后 VSCode 中已经生成了很多配置文档，不用担心，你只要确保其中有 C 和 C++的编译命令即可。</p><p>这里简单解释一下<code>cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt</code>：<code>$dir</code>表示当前文件的所在目录，<code>cd</code> 会将终端的工作目录切换到<code>$dir</code> 下，然后对当前文件 <code>$fileName</code> 使用<code>g++</code> 进行编译，编译生成的文件名是<code>$fileNameWithoutExt</code>，然后紧接着直接通过命令<code>$dir$fileNameWithoutExt</code>运行编译好的文件。如果你不能完全理解我在说什么也没有关系，只要确保有这一条配置就可以了。</p></li></ol><h3 id="测试运行">测试运行</h3><p>接下来我们测试运行 C++代码，首先我们需要在电脑中找一个地方创建一个空的文件夹用来存放代码（最好是空的），点击左上角的「文件」，然后点击「打开文件夹」，选择刚刚创建的文件夹。例如，我这里创建了一个名字为 CPP 的文件夹，点击按钮创建新的文件a.cpp。</p><p><img title="" src="13_testrun.png" alt="" data-align="center" width="700"></p><p>输入以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击 Run Code 运行（或者 Ctrl + Alt + N），可以看到下面的终端输出了<code>Hello World!</code>11 ，运行成功！</p><p><img title="" src="14_testrun.png" alt="" data-align="center" width="700"></p><p>到此为止，你可以通过 VS Code 来写单文件的 CPP代码了。（如果要是多文件的 CPP 项目，建议使用 MakeFile 来编译）</p><h3 id="调试运行">调试运行</h3><p>如果你不满足于终端运行，想要单步调试代码，该如何处理？也很简单，首先，你在 CPP 文件夹中创建一个名字为 .vscode的文件，注意前面的点不可以被忽略，它将被 VS Code视作配置文件。然后在里面创建两个文件：</p><ol type="1"><li><p>launch.json 注意下面的第 15 行配置，它对应的是你 MinGW的安装环境，需要找到 bin 目录下的 gdb.exe文件。注意所有的文件分隔符都是用 <code>/</code> 而不是<code>\</code>，如果使用 <code>\</code> 还需要将其转义为<code>\\</code>。 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试目标文件</span></span><br><span class="line">         <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 指定调试传入参数，可自行修改</span></span><br><span class="line">         <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;cwd&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;G:/Program Files/mingw64/bin/gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// /path/to/gdb</span></span><br><span class="line">         <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">             <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build-g++&quot;</span> <span class="comment">// 每次调试前 - 都进行生成任务执行编译，保证调试的目标文件是最新的</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>注意到启动调试 （launch）之前，我们配置了 build-g++，所以还需要一个tasks.json文件。</p></li><li><p>tasks.json 以下内容不需要修改，直接复制粘贴即可。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">     <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">     <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build-g++&quot;</span><span class="punctuation">,</span>                         <span class="comment">// 给当前的生成任务一个名字</span></span><br><span class="line">             <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                                        <span class="comment">// 如果你以后对于编译参数有任何修改，就在这里修改。</span></span><br><span class="line">                 <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasename&#125;&quot;</span><span class="punctuation">,</span>                           <span class="comment">// $&#123;fileBasenmae&#125; VS Code 内置变量: 当前活动文件的完整文件名 - helloworld.cpp</span></span><br><span class="line">                 <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>            <span class="comment">// $&#123;fileBasenameNoExtension&#125; 这个是 VS Code 内置变量: 当前活动文件的完整文件名舍去扩展名 - helloworld</span></span><br><span class="line">                 <span class="string">&quot;-Wall&quot;</span>                                      <span class="comment">// 开启全部警告</span></span><br><span class="line">             <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">             <span class="comment">// 错误消息获得 - 正则表达式</span></span><br><span class="line">             <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                     <span class="string">&quot;relative&quot;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="comment">// &quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">                     <span class="string">&quot;\\&quot;</span></span><br><span class="line">                 <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">                 <span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span>        <span class="comment">// 指定当前任务类型</span></span><br><span class="line">                 <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>      <span class="comment">// 设置为默认任务  </span></span><br><span class="line">             <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></li></ol><p>配置完成后，你的文件结构应该是这样的（注意 a.cpp 在 CPP 中，而不是在.vscode 中）：</p><p><img title="" src="15_config_debug.png" alt="" data-align="center" width="700"></p><p>为了测试方便， 我们写了下面这份代码演示调试流程，代码含义是计算 1~ 10的和：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要在调试过程中在某条语句处停下，你需要在对应的行前面打上断点，不打断点的话，调试和直接运行并没有明显差异：</p><p><img title="" src="16_config_debug.png" alt="" data-align="center" width="600"></p><p>然后按 F5，或者点击右上角的三角形选择调试，进入调试。</p><p><img title="" src="17_config_debug.png" alt="" data-align="center" width="400"></p><p>调试过程中，你可以按 F10 来逐步执行代码，并监控每个变量的值。如下图所示，我们运行到了 i = 6 这一步，第 7 行代码高亮，这表示<code>sum += i</code> 还没有执行，这时 sum 只累加了 1 ~ 5，所以<code>sum = 15</code>。</p><p><img title="" src="18_config_debug.png" alt="" data-align="center" width="400"></p><p>到此为止，你可以畅快的使用 VS Code 来编写 C++ 代码了！</p><h2 id="其他">其他</h2><h3 id="插件">插件</h3><h4 id="material-icon-theme">Material Icon Theme</h4><p><img title="" src="19_plugin.png" alt="" data-align="left" width="400"></p><p>该插件可以美化图标，让你的代码项目结构更加清晰。</p><p><img title="" src="20_plugin.png" alt="" data-align="left" width="400"></p><h4 id="community-material-theme">Community Material Theme</h4><p>主题美化插件</p><p><img title="" src="21_plugin.png" alt="" data-align="left" width="400"></p><h4 id="indent-rainbow">indent-rainbow</h4><p><img title="" src="22_plugin.png" alt="" data-align="left" width="400"></p><p>缩进高亮显示，代码结构更加清晰</p><p><img title="" src="23_plugin.png" alt="" data-align="left" width="400"></p><h4 id="bracket-pair-colorizer-2">Bracket Pair Colorizer 2</h4><p>彩虹括号</p><p><img title="" src="25_plugin.png" alt="" data-align="left" width="400"></p><p>详细配置教程：https://blog.csdn.net/hazelnut_x/article/details/108910971</p><p><img title="" src="24_plugin.png" alt="" data-align="left" width="400"></p><h3 id="python">Python</h3><p>VS Code 也可以用来编写 Python，它的配置方法可以参考这里：<ahref="https://zhuanlan.zhihu.com/p/64994681">Python in VS Code</a></p><p>除了编写基本的python，你也可以通过安装 jupyter 插件来方便的编写 ipynb文件。<a href="https://zhuanlan.zhihu.com/p/378378346">Python +Jupyter</a></p><h3 id="go">Go</h3><p><ahref="https://docs.microsoft.com/zh-cn/azure/developer/go/configure-visual-studio-code">VSCode for Go</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先善其事必先利其器，使用一款好的编译器对于我们工作学习来说是至关重要的。不论你使用的是
Windows 、Mac OS 还是 Linux，我们都推荐使用 VS code(Visual Studio code)
编辑器。它是微软开发的一款开源跨平台编辑器，几乎在任何系统(甚至</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Anaconda&amp;Jupyter快速上手</title>
    <link href="https://dsis-scss.github.io/wiki/Anaconda-jupyter%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://dsis-scss.github.io/wiki/Anaconda-jupyter%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2022-08-10T13:20:39.000Z</published>
    <updated>2022-09-03T11:43:51.093Z</updated>
    
    <content type="html"><![CDATA[<p>conda是一个python虚拟环境管理软件，它允许你为每一个python项目创建独立的环境，如果你被python的环境问题折磨过，那么你就会知道conda有多好用。而<ahref="https://www.anaconda.com/">Anaconda</a>则是python的一个发行版本，也是conda的图形化版本。有了Anaconda，每次在运行一个新的python项目时，你都应该<strong>重新创建一个pythonenv</strong>，并且在该env下安装python包、执行命令</p><h2 id="安装anacondaconda">安装Anaconda(conda)</h2><p>推荐<ahref="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华源</a>下载最新的版本，或者合适的版本，注意选择合适你的操作系统和处理器架构的安装包。如果是在没有图形界面的服务器上，推荐安装<ahref="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">Miniconda</a></p><p>Anaconda的安装有图形化界面，在此就不再赘述，没有特殊要求的话，使用默认配置一路点继续就可以了，需要注意的是，在安装过程中记得勾选<strong>将conda配置进系统环境变量中</strong></p><p>Miniconda安装包下载下来之后是一个<code>.sh</code>脚本文件，对其添加执行文件后，直接利用bash执行然后按照步骤安装即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda-x.x.x-Linux-x86_64.sh</span><br><span class="line">sudo +x Miniconda-x.x.x-Linux-x86_64.sh</span><br><span class="line">./Miniconda-x.x.x-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></p><p>注意Miniconda安装时它会询问你是否要运行<code>conda init</code>，请选择<strong>yes</strong>，此步的作用是将conda的配置写入你的shell配置文件中，安装完成后，可以查看你的shell配置文件是否包含<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(&#x27;/Users/xingguangjie/opt/anaconda3/bin/conda&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/Users/xingguangjie/opt/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/Users/xingguangjie/opt/anaconda3/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">&quot;/Users/xingguangjie/opt/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>如果没有的话，就无法正常执行<code>conda</code>指令，请重新安装或者切换到conda的安装目录中（执行安装脚本的时候有写），手动执行<code>conda init</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./conda init</span><br></pre></td></tr></table></figure></p><p>完成安装后，在终端中输入<code>conda --versin</code>可正常运行即可（Windows可以在开始-应用程序中找到<strong>anacondaprompt</strong>作为终端使用）</p><h2 id="conda常用命令">conda常用命令</h2><p>有了Anaconda，就可以在<code>Anaconda Navigator</code>里面创建虚拟环境、安装包等等，但是不推荐使用，更加常见的方式还是直接通过命令行与conda交互，下面列举几条常见的命令</p><ol type="1"><li>激活一个环境（切换到已有的环境中）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate base <span class="comment"># 切换到名字为base的环境下（刚刚安装好conda没有创建新环境的情况下默认只有base环境）</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>从环境中退出</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>创建一个新环境，并且指定环境的python版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n <span class="built_in">test</span> python=3.7 <span class="comment"># 创建python版本为3.7的名为test的环境</span></span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>删除一个环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove <span class="built_in">test</span> <span class="comment"># 删除一个名为test的环境</span></span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>在特定的环境中安装包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate <span class="built_in">test</span></span><br><span class="line">pip install numpy&gt;=3.7 <span class="comment"># 通过pip安装版本号高于3.7的numpy包</span></span><br><span class="line">conda install numpy&gt;=3.7 <span class="comment"># 通过conda安装版本号高于3.7的numpy包</span></span><br></pre></td></tr></table></figure><h2 id="配置jupyter">配置Jupyter</h2><p><ahref="https://jupyter.org/">jupyter</a>是一个开源的python交互式web应用，最大的用处就是可以一行一行运行python代码，并且实时的将一些数据或者图表打印出来，有助于debug以及数据分析</p><p>首先安装jupyter <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate <span class="built_in">test</span></span><br><span class="line">conda install jupyter <span class="comment"># 在名为test的环境下安装jupyter</span></span><br></pre></td></tr></table></figure></p><p>推荐使用<code>conda</code>安装，它会帮你把所有的依赖都安装好</p><p>安装完成后，即可在安装的环境下直接运行<code>jupyter-notebook</code>命令，会自动打开一个浏览器窗口，同时在终端中出现一个本地url，访问这个url即可进入jupyter服务</p><p><img src="1.png" /></p><p>jupyter中的基本单元是代码块，代码都是一块一块执行的，在代码块中编写代码，然后按<code>shift-Enter</code>即可完成执行这一块的代码，并且产生输出</p><h2 id="在服务器中使用jupyter">在服务器中使用jupyter</h2><p>如果使用云端服务器，则可以配置服务器端口转发实现本地运行服务器端jupyter服务（例如服务器端有完善的python环境或者需要使用服务器GPU运行调试某些python代码）</p><p>配置比较简单，可以参考</p><ul><li><a href="https://zhuanlan.zhihu.com/p/440080687">Jupyternotebook远程连接服务器</a></li><li><a href="https://zhuanlan.zhihu.com/p/435223393">JupyterNotebook服务器配置</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;conda是一个python虚拟环境管理软件，它允许你为每一个python项目创建独立的环境，如果你被python的环境问题折磨过，那么你就会知道conda有多好用。而&lt;a
href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt;则是pyt</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>文献管理工具-Zotero</title>
    <link href="https://dsis-scss.github.io/wiki/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Zotero/"/>
    <id>https://dsis-scss.github.io/wiki/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Zotero/</id>
    <published>2022-08-10T01:15:57.000Z</published>
    <updated>2022-09-03T11:43:51.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zotero介绍">Zotero介绍</h2><p>官方网站：<a href="https://www.zotero.org/">Zotero | Your personalresearch assistant</a></p><blockquote><p>Zotero是一个免费软件，可以帮助你进行文献的收集、整理、注释和引用。</p><p>Zotero具有较高的自由度，有许多插件可供选择。</p></blockquote><p><img title="" src="2022-08-10-10-41-42-image.png" alt="" data-align="center" width="600"></p><h2 id="下载与安装">下载与安装</h2><h3 id="本体">本体</h3><ol type="1"><li><p>可在<ahref="https://www.zotero.org/download/">Zotero官网</a>下载安装包</p></li><li><p>运行安装包，选择安装位置即可</p></li></ol><h3 id="浏览器插件-zotero-connector">浏览器插件-Zotero Connector</h3><ol type="1"><li><p>ZoteroConnector可以从网页中抓取文献和元数据，将其保存到本地。只有Zotero运行时ZoteroConnector才能使用。</p></li><li><p>Zotero Connector支持Edge、Chrome、火狐、Safari浏览器</p></li><li><p><a href="https://www.zotero.org/download/">ZoteroConnector下载链接</a></p></li><li><p>Edge、Chrome插件可在对应浏览器的插件引用市场获取</p></li><li><p>火狐、Safari的插件安装方法可参考下载页面</p></li></ol><h3 id="插件">插件</h3><ol type="1"><li><p>打开【Zotero】</p></li><li><p>点击【工具】—【插件】</p></li><li><p>将需要安装的插件【拖动】至该页面</p></li><li><p>安装完毕后重启【Zotero】</p></li></ol><h4 id="推荐插件">推荐插件</h4><ul><li><p>ZotFile：自动修改附件名、添加附件</p><ul><li><p>官方网站：<a href="http://zotfile.com/">ZotFile - Advanced PDFmanagement for Zotero</a></p></li><li><p>Github仓库：<ahref="https://github.com/jlegewie/zotfile">jlegewie/zotfile: Zoteroplugin to manage your attachments</a></p></li></ul></li><li><p>茉莉花：抓取中文网站元数据</p><ul><li>GIthub仓库：<ahref="https://github.com/l0o0/jasminum">l0o0/jasminum: A Zotero add-onto retrive CNKI meta data</a></li></ul></li></ul><h2 id="配置">配置</h2><h3 id="在线同步">在线同步</h3><ol type="1"><li><p>打开【Zotero】—【编辑】—【首选项】—【同步】</p></li><li><p>在【数据同步】栏创建并登录Zotero账号<img src="2022-08-11-16-07-32-image.png" title="" alt="" width="600"></p></li><li><p>在【文件同步】栏，可以使用Zotero文件同步服务的300MB免费空间，也可以使用支持WebDAV的云盘，这里使用坚果云为例，坚果云免费账号每月提供1GB上传流量和3GB下载流量，足够用于文献同步</p></li><li><p>进入<ahref="https://www.jianguoyun.com/">坚果云官网</a>，创建并登陆账号，进入【账户信息】—【安全选项】<img src="2022-08-11-15-56-52-image.png" title="" alt="" width="600"><img src="2022-08-11-15-59-56-image.png" title="" alt="" width="600"></p></li><li><p>点击添加应用，输入名称（如Zotero），点击生成密码<img src="2022-08-11-16-01-50-image.png" title="" alt="" width="600"></p></li><li><p>将服务器地址、账户、密码复制入【Zotero】设置界面的【文件同步】栏<img src="2022-08-11-16-11-54-image.png" title="" alt="" width="600"><img src="2022-08-11-16-17-46-image.png" title="" alt="" width="600"></p></li></ol><h3 id="pdf下载-sci-hub">PDF下载-sci-hub</h3><ol type="1"><li><p>打开【Zotero】—【编辑】—【首选项】—【高级】—【常规】—【设置编辑器】</p></li><li><p>接受风险，搜索找到【extensions.zotero.findPDFs.resolvers】</p></li><li><p>双击编辑，将默认的<code>[]</code>替换为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;Sci-Hub&quot;,</span><br><span class="line">  &quot;method&quot;:&quot;GET&quot;,</span><br><span class="line">  &quot;url&quot;:&quot;https://sci-hub.hkvisa.net/&#123;doi&#125;&quot;,</span><br><span class="line">  &quot;mode&quot;:&quot;html&quot;,</span><br><span class="line">  &quot;selector&quot;:&quot;#pdf&quot;,</span><br><span class="line">  &quot;attribute&quot;:&quot;src&quot;,</span><br><span class="line">  &quot;automatic&quot;:true </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中【https://sci-hub.hkvisa.net】为可用的sci-hub链接</p></li><li><p>设置完成后可通过ISBN、DOI等下载PDF<img src="2022-08-10-20-42-26-image.png" title="" alt="" width="600"></p></li><li><p>也可以在ZoteroConnector无法抓取PDF时，右键点击条目手动下载PDF<img src="2022-08-10-20-45-44-image.png" title="" alt="" width="600"></p></li></ol><h3 id="zotfile">ZotFile</h3><ol type="1"><li><p>进入【Zotero】—【工具】—【ZotFile Preferences…】</p></li><li><p>【GeneralSettings】设置更加方便的向条目中添加附件，但个人感觉实用性不强，设置可参考文末的参考链接<ahref="https://zhuanlan.zhihu.com/p/347493385">Zotero：科研小白的第一款文献管理软件- 知乎 (zhihu.com)</a></p></li><li><p>【TabletSettings】设置与云盘的同步，并实现跨平台同步，设置方法同样参考文末链接<ahref="https://zhuanlan.zhihu.com/p/347493385">Zotero：科研小白的第一款文献管理软件- 知乎 (zhihu.com)</a></p></li><li><p>【RenamingRules】设置通过规则语句对PDF、DOC等文件进行重命名，规则语句的编写格式参考<ahref="http://zotfile.com/index.html#renaming-rules">ZotFile的说明</a></p></li><li><p>【Advanced Settings】对重命名进行进阶设置，可以不动</p></li></ol><h3 id="茉莉花">茉莉花</h3><ol type="1"><li>还没用过，待补充</li></ol><h2 id="使用实例">使用实例</h2><ol type="1"><li><p>在网页中找到需要的文献，点击【ZoteroConnector】，可在弹出的页面将本文献的条目归档至某文件夹，并添加tag。这里将文献归档至【TEST】文件夹并添加tag【00】代表未读<img src="2022-08-11-16-56-27-image.png" title="" alt="" width="600"></p></li><li><p>可以看到我们刚刚添加的文献，两个文件分别是文献的PDF和网页快照，双击即可打开，此外可在右侧设置文献条目的信息<img src="2022-08-11-17-27-00-image.png" title="" alt="" width="600"></p></li><li><p>在阅读文献的过程中做的笔记以及其他相关资料，可以以【附件】的形式添加到文献条目中<img src="2022-08-11-17-31-53-image.png" title="" alt="" width="600"></p></li><li><p>左下角的展示的是文献的tag，可以通过指派颜色管理常用的tag，如已读、未读等，右键点击代表已读的tag【Read】，选择指派颜色，即可将其设置为蓝色，快捷键设为【2】，之后就可以通过键盘【2】快速更改条目的阅读状态<img src="2022-08-11-17-36-05-image.png" title="" alt="" width="600"><img src="2022-08-11-17-37-06-image.png" title="" alt="" width="300"></p></li></ol><h2 id="参考链接">参考链接</h2><ul><li><p><a href="https://www.zotero.org/">Zotero | Your personal researchassistant</a></p></li><li><p><ahref="https://zhuanlan.zhihu.com/p/347493385">Zotero：科研小白的第一款文献管理软件- 知乎 (zhihu.com)</a></p></li><li><p><ahref="https://www.jianguoyun.com/">坚果云官网|网盘|云盘|云服务|团队协作软件|同步盘(jianguoyun.com)</a></p></li><li><p><a href="http://zotfile.com/index.html">ZotFile - Advanced PDFmanagement for Zotero</a></p></li><li><p><a href="https://github.com/l0o0/jasminum">l0o0/jasminum: AZotero add-on to retrive CNKI meta data. 一个简单的Zotero插件，用于识别中文元数据 (github.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;zotero介绍&quot;&gt;Zotero介绍&lt;/h2&gt;
&lt;p&gt;官方网站：&lt;a href=&quot;https://www.zotero.org/&quot;&gt;Zotero | Your personal
research assistant&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="工具" scheme="https://dsis-scss.github.io/categories/tools/"/>
    
    <category term="科研软件" scheme="https://dsis-scss.github.io/categories/tools/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>时序预测论文整理</title>
    <link href="https://dsis-scss.github.io/wiki/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%BA%E6%96%87%E6%95%B4%E7%90%86/"/>
    <id>https://dsis-scss.github.io/wiki/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%BA%E6%96%87%E6%95%B4%E7%90%86/</id>
    <published>2022-07-28T08:39:34.000Z</published>
    <updated>2022-09-03T11:43:51.141Z</updated>
    
    <content type="html"><![CDATA[<table><colgroup><col style="width: 26%" /><col style="width: 52%" /><col style="width: 21%" /></colgroup><thead><tr class="header"><th>Tittle</th><th>Algorithm</th><th>Idea</th></tr></thead><tbody><tr class="odd"><td><strong>classical methods</strong></td><td></td><td></td></tr><tr class="even"><td>An adaptive prediction approach based on workload patterndiscrimination in the cloud</td><td>An adaptive approach</td><td>categorizes the workloads into different classes which areautomatically assigned for different models according to workloadfeatures</td></tr><tr class="odd"><td>TODO</td><td>Exponential Smoothing(ES)</td><td></td></tr><tr class="even"><td>A Hierarchical Framework for Modeling and Forecasting Web ServerWorkload</td><td>Auto Regression(AR)</td><td>A linear combination of past values of the variable underconsideration is used to forecast the value for upcoming timeinstances.</td></tr><tr class="odd"><td>Dual time-scale distributed capacity allocation and load redirectalgorithms for cloud systems</td><td>Moving Average(MA)</td><td>non-linear optimization The model is appropriate for time seriesexhbiting seasonal behavior only</td></tr><tr class="even"><td>Efficient autoscaling in the cloud using predictive models forworkload forecasting</td><td>Autoregressive Integrated Moving Average(ARIMA)</td><td>also discussed the challenges involved in auto scaling in a cloudenvironment</td></tr><tr class="odd"><td>Workload Prediction Using ARIMA Model and Its Impact on CloudApplications’ QoS</td><td>Autoregressive Integrated Moving Average(ARIMA)</td><td>ARIMA on different confidence interval to predict web serverworkload</td></tr><tr class="even"><td>Workload characterization and prediction in the cloud: A multipletime series approach</td><td>Hidden Markov Model</td><td>distinguish the temporal correlations in obtained clusters ofVMs</td></tr><tr class="odd"><td>A workload analysis of live event broadcast service in cloud</td><td>Regression techniques</td><td>the approach is based on simple statistical models that might notcapture the patterns in more complex data</td></tr><tr class="even"><td>Workload characterization and prediction in the cloud: A multipletime series approach</td><td>multiple time series approch</td><td>The model does a grouping of similar applications's need in order toimprove the accuracy of predictions</td></tr><tr class="odd"><td><strong>machine learning methods</strong></td><td></td><td></td></tr><tr class="even"><td>Support vector machines experts for time series forecasting</td><td>Self organizing map(SOM) and support vector machines(SVMs)</td><td>Self organizing map was used to cluster the data in differentregions while SVMs were used to predict the future data</td></tr><tr class="odd"><td>Referential kNN Regression for Financial Time SeriesForecasting</td><td><span class="math inline">\(k\)</span> Nearest Neighbors(kNN)</td><td>For financial time series prediction. kNNs are lazy learners andneed high computational cost</td></tr><tr class="even"><td>Hierarchical neural networks based prediction and control of dynamicreconfiguration for multilevel embedded systems</td><td>the Neural network</td><td>used to model workload variations in multimidia designs</td></tr><tr class="odd"><td>A cost-aware auto-scaling approach using the workload prediction inservice clouds</td><td>Linear regression</td><td>the predicted workload was used to decide the type of scaling</td></tr><tr class="even"><td>Efficient resources provisioning based on load forecasting incloud</td><td>Support Vector Regression(SVR) and Kalman smoother</td><td>It achieved high prediction accuracy</td></tr><tr class="odd"><td>Combining time series prediction models using genetic algorithm toautoscaling Web applications hosted in the cloud infrastructure</td><td>Ensemble based model</td><td>It uses five different base prediction models. Each model isassigned a weight and contributes accordingly in predictions. The weightare assigned and optimized using genetic algorithm</td></tr><tr class="even"><td>Empirical prediction models for adaptive resource provisioning inthe cloud</td><td>Neural network and Linear regression</td><td></td></tr><tr class="odd"><td>RVLBPNN: A Workload Forecasting Model for Smart Cloud Computing</td><td>back propagation learning algorithm</td><td>It adjusts the weights of model according to error trend.</td></tr><tr class="even"><td>A Predictive Method for Workload Forecasting in the CloudEnvironment</td><td>neural network and steepest descent learning algorithm</td><td>suffers from high prediction errors.</td></tr><tr class="odd"><td>Workload prediction in cloud using artificial neural network andadaptive differential evolution</td><td>neural network and adaptive differential evolution</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 26%&quot; /&gt;
&lt;col style=&quot;width: 52%&quot; /&gt;
&lt;col style=&quot;width: 21%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
</summary>
      
    
    
    
    <category term="知识" scheme="https://dsis-scss.github.io/categories/knowledge/"/>
    
    <category term="论文" scheme="https://dsis-scss.github.io/categories/knowledge/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>分布式系统入门(MIT 6.824)</title>
    <link href="https://dsis-scss.github.io/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://dsis-scss.github.io/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-07-27T09:02:26.000Z</published>
    <updated>2022-09-03T11:43:51.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mit6.824课程主页">MIT6.824课程主页</h2><p><ahref="http://nil.csail.mit.edu/6.824/2022/">http://nil.csail.mit.edu/6.824/2022/</a></p><h2 id="课程安排">课程安排</h2><p><ahref="http://nil.csail.mit.edu/6.824/2022/schedule.html">http://nil.csail.mit.edu/6.824/2022/schedule.html</a></p><h2 id="论文翻译">论文翻译</h2><ul><li><ahref="https://github.com/ConnorChen97/paper/blob/0a72fe0b354b65bac25e45163163eb2573f1faf2/map-reduce/map-reduce-cn.pdf">MapReduce(2004)</a></li><li><ahref="https://spongecaptain.cool/post/paper/googlefilesystem/">GFS(2003)</a></li><li><ahref="https://www.cnblogs.com/brianleelxt/p/13245754.html">Fault-TolerantVirtual Machines (2010)</a></li><li><ahref="https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md">Raft(2014)</a></li></ul><h2 id="lab参考">lab参考</h2><ul><li><ahref="https://github.com/SwordHarry/MIT6.824_2021_note">SwordHarry/MIT6.824_2021_note</a></li></ul><h2 id="参考书目">参考书目</h2><p><ahref="/wiki/DDIA-设计数据密集型应用">DDIA-设计数据密集型应用</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mit6.824课程主页&quot;&gt;MIT6.824课程主页&lt;/h2&gt;
&lt;p&gt;&lt;a
href=&quot;http://nil.csail.mit.edu/6.824/2022/&quot;&gt;http://nil.csail.mit.edu/6.824/2022/&lt;/a&gt;&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="知识" scheme="https://dsis-scss.github.io/categories/knowledge/"/>
    
    <category term="体系结构" scheme="https://dsis-scss.github.io/categories/knowledge/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>DDIA-设计数据密集型应用</title>
    <link href="https://dsis-scss.github.io/wiki/DDIA-%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8/"/>
    <id>https://dsis-scss.github.io/wiki/DDIA-%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8/</id>
    <published>2022-07-27T09:01:14.000Z</published>
    <updated>2022-09-03T11:43:51.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="书名">书名</h2><p>《Designing Data-Intensive Applications》</p><h2 id="简介">简介</h2><p>现今，尤其是在互联网领域，大多数应用都属于数据密集型应用。本书从底层数据结构到顶层架构设计，将数据系统设计中的精髓娓娓道来。其中的宝贵经验无论是对架构师、DBA、还是后端工程师、甚至产品经理都会有帮助。</p><p>实验室有一部分研究是在分布式多机系统下的数据存储与管理，特别是应用于云硬盘系统的存储管理，该书可以有助于理解数据密集型应用所需要考虑的问题，发现可以优化的点，以及对于分布式架构有所了解。</p><h2 id="中文翻译">中文翻译</h2><p><a href="http://ddia.vonng.com/#/">设计数据密集型应用 -中文翻译</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;书名&quot;&gt;书名&lt;/h2&gt;
&lt;p&gt;《Designing Data-Intensive Applications》&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;现今，尤其是在互联网领域，大多数应用都属于数据密集型应用。本书从底层数据结构到顶层架构设计，将数据系</summary>
      
    
    
    
    <category term="资源" scheme="https://dsis-scss.github.io/categories/resource/"/>
    
    <category term="书目" scheme="https://dsis-scss.github.io/categories/resource/%E4%B9%A6%E7%9B%AE/"/>
    
    
  </entry>
  
</feed>
